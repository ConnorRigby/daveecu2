
DaveECUTestFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b10c  0800b10c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f18  20000180  0800b294  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002098  0800b294  00022098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002731c  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af2  00000000  00000000  000474cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  0004bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d98  00000000  00000000  0004df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba9e  00000000  00000000  0004fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002612a  00000000  00000000  0007b73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc3c9  00000000  00000000  000a1868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019dc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086c4  00000000  00000000  0019dc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000180 	.word	0x20000180
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800b08c 	.word	0x0800b08c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000184 	.word	0x20000184
 80001e8:	0800b08c 	.word	0x0800b08c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 fb36 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f822 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fdc8 	bl	8001084 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f4:	f000 f8a2 	bl	800063c <MX_ADC1_Init>
  MX_CAN1_Init();
 80004f8:	f000 f8f2 	bl	80006e0 <MX_CAN1_Init>
  MX_RTC_Init();
 80004fc:	f000 f964 	bl	80007c8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8000500:	f000 f9c6 	bl	8000890 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000504:	f000 f9f4 	bl	80008f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000508:	f000 fa28 	bl	800095c <MX_TIM1_Init>
  MX_TIM2_Init();
 800050c:	f000 faea 	bl	8000ae4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000510:	f000 fb7e 	bl	8000c10 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000514:	f000 fc14 	bl	8000d40 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000518:	f000 fc80 	bl	8000e1c <MX_TIM12_Init>
  MX_TIM13_Init();
 800051c:	f000 fcec 	bl	8000ef8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000520:	f000 fd38 	bl	8000f94 <MX_TIM14_Init>
  MX_UART7_Init();
 8000524:	f000 fd84 	bl	8001030 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000528:	f00a f890 	bl	800a64c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800052c:	f000 f90c 	bl	8000748 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
	...

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0a0      	sub	sp, #128	; 0x80
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00a fd9a 	bl	800b07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2230      	movs	r2, #48	; 0x30
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f00a fd8b 	bl	800b07c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b32      	ldr	r3, [pc, #200]	; (8000634 <SystemClock_Config+0x100>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	4a31      	ldr	r2, [pc, #196]	; (8000634 <SystemClock_Config+0x100>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000574:	6413      	str	r3, [r2, #64]	; 0x40
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <SystemClock_Config+0x100>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <SystemClock_Config+0x104>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <SystemClock_Config+0x104>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0x104>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80005a2:	2305      	movs	r3, #5
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005ba:	230f      	movs	r3, #15
 80005bc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005c6:	2305      	movs	r3, #5
 80005c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fce0 	bl	8003f94 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005da:	f000 fe33 	bl	8001244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005e2:	2301      	movs	r3, #1
 80005e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 ff43 	bl	8004484 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000604:	f000 fe1e 	bl	8001244 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000608:	2320      	movs	r3, #32
 800060a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800060c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f910 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000622:	f000 fe0f 	bl	8001244 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000626:	f004 f813 	bl	8004650 <HAL_RCC_EnableCSS>
}
 800062a:	bf00      	nop
 800062c:	3780      	adds	r7, #128	; 0x80
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_ADC1_Init+0x98>)
 800067c:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_ADC1_Init+0xa0>)
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000688:	2201      	movs	r2, #1
 800068a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_ADC1_Init+0x98>)
 800069c:	f001 faf2 	bl	8001c84 <HAL_ADC_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 fdcd 	bl	8001244 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0x98>)
 80006bc:	f001 fb26 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c6:	f000 fdbd 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200004a0 	.word	0x200004a0
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_CAN1_Init+0x60>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_CAN1_Init+0x64>)
 80006e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_CAN1_Init+0x60>)
 80006ec:	2210      	movs	r2, #16
 80006ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_CAN1_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_CAN1_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_CAN1_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_CAN1_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_CAN1_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_CAN1_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_CAN1_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_CAN1_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_CAN1_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_CAN1_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_CAN1_Init+0x60>)
 800072e:	f001 fd1b 	bl	8002168 <HAL_CAN_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 fd84 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000704 	.word	0x20000704
 8000744:	40006400 	.word	0x40006400

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_I2C1_Init+0x74>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_I2C1_Init+0x74>)
 8000786:	f002 f8c3 	bl	8002910 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fd58 	bl	8001244 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_I2C1_Init+0x74>)
 8000798:	f002 f9fe 	bl	8002b98 <HAL_I2CEx_ConfigAnalogFilter>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 fd4f 	bl	8001244 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x74>)
 80007aa:	f002 fa31 	bl	8002c10 <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 fd46 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000044c 	.word	0x2000044c
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_RTC_Init+0xc0>)
 80007e2:	4a2a      	ldr	r2, [pc, #168]	; (800088c <MX_RTC_Init+0xc4>)
 80007e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_RTC_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_RTC_Init+0xc0>)
 80007ee:	227f      	movs	r2, #127	; 0x7f
 80007f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_RTC_Init+0xc0>)
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_RTC_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_RTC_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_RTC_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800080a:	481f      	ldr	r0, [pc, #124]	; (8000888 <MX_RTC_Init+0xc0>)
 800080c:	f004 f9d4 	bl	8004bb8 <HAL_RTC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 fd15 	bl	8001244 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800081e:	2300      	movs	r3, #0
 8000820:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000822:	2300      	movs	r3, #0
 8000824:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2201      	movs	r2, #1
 8000832:	4619      	mov	r1, r3
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_RTC_Init+0xc0>)
 8000836:	f004 fa50 	bl	8004cda <HAL_RTC_SetTime>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 fd00 	bl	8001244 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000844:	2301      	movs	r3, #1
 8000846:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000848:	2301      	movs	r3, #1
 800084a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800084c:	2301      	movs	r3, #1
 800084e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	2201      	movs	r2, #1
 8000858:	4619      	mov	r1, r3
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_RTC_Init+0xc0>)
 800085c:	f004 fafa 	bl	8004e54 <HAL_RTC_SetDate>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000866:	f000 fced 	bl	8001244 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_RTC_Init+0xc0>)
 8000870:	f004 fc09 	bl	8005086 <HAL_RTCEx_SetWakeUpTimer>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800087a:	f000 fce3 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000530 	.word	0x20000530
 800088c:	40002800 	.word	0x40002800

08000890 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_SDIO_SD_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008c0:	f004 fc75 	bl	80051ae <HAL_SD_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80008ca:	f000 fcbb 	bl	8001244 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80008ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SDIO_SD_Init+0x58>)
 80008d4:	f004 febe 	bl	8005654 <HAL_SD_ConfigWideBusOperation>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 fcb1 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200005e0 	.word	0x200005e0
 80008ec:	40012c00 	.word	0x40012c00

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI1_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x64>)
 800093a:	220a      	movs	r2, #10
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_SPI1_Init+0x64>)
 8000940:	f005 f9e5 	bl	8005d0e <HAL_SPI_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800094a:	f000 fc7b 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000664 	.word	0x20000664
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f00a fb71 	bl	800b07c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <MX_TIM1_Init+0x180>)
 800099c:	4a50      	ldr	r2, [pc, #320]	; (8000ae0 <MX_TIM1_Init+0x184>)
 800099e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a0:	4b4e      	ldr	r3, [pc, #312]	; (8000adc <MX_TIM1_Init+0x180>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <MX_TIM1_Init+0x180>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ac:	4b4b      	ldr	r3, [pc, #300]	; (8000adc <MX_TIM1_Init+0x180>)
 80009ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b49      	ldr	r3, [pc, #292]	; (8000adc <MX_TIM1_Init+0x180>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <MX_TIM1_Init+0x180>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b46      	ldr	r3, [pc, #280]	; (8000adc <MX_TIM1_Init+0x180>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c6:	4845      	ldr	r0, [pc, #276]	; (8000adc <MX_TIM1_Init+0x180>)
 80009c8:	f005 fa2a 	bl	8005e20 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009d2:	f000 fc37 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e0:	4619      	mov	r1, r3
 80009e2:	483e      	ldr	r0, [pc, #248]	; (8000adc <MX_TIM1_Init+0x180>)
 80009e4:	f005 fb82 	bl	80060ec <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 fc29 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f2:	483a      	ldr	r0, [pc, #232]	; (8000adc <MX_TIM1_Init+0x180>)
 80009f4:	f005 fa63 	bl	8005ebe <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009fe:	f000 fc21 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4832      	ldr	r0, [pc, #200]	; (8000adc <MX_TIM1_Init+0x180>)
 8000a12:	f005 ff19 	bl	8006848 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 fc12 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4825      	ldr	r0, [pc, #148]	; (8000adc <MX_TIM1_Init+0x180>)
 8000a46:	f005 fa93 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a50:	f000 fbf8 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481f      	ldr	r0, [pc, #124]	; (8000adc <MX_TIM1_Init+0x180>)
 8000a5e:	f005 fa87 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a68:	f000 fbec 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	2208      	movs	r2, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	4819      	ldr	r0, [pc, #100]	; (8000adc <MX_TIM1_Init+0x180>)
 8000a76:	f005 fa7b 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a80:	f000 fbe0 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	220c      	movs	r2, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM1_Init+0x180>)
 8000a8e:	f005 fa6f 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a98:	f000 fbd4 	bl	8001244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <MX_TIM1_Init+0x180>)
 8000ac0:	f005 ff3e 	bl	8006940 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000aca:	f000 fbbb 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <MX_TIM1_Init+0x180>)
 8000ad0:	f000 fe24 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000ad4:	bf00      	nop
 8000ad6:	3758      	adds	r7, #88	; 0x58
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000550 	.word	0x20000550
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b28:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3c:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b3e:	f005 f96f 	bl	8005e20 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b48:	f000 fb7c 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	4619      	mov	r1, r3
 8000b58:	482c      	ldr	r0, [pc, #176]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b5a:	f005 fac7 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b64:	f000 fb6e 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b68:	4828      	ldr	r0, [pc, #160]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b6a:	f005 f9a8 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b74:	f000 fb66 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4619      	mov	r1, r3
 8000b86:	4821      	ldr	r0, [pc, #132]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000b88:	f005 fe5e 	bl	8006848 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b92:	f000 fb57 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000bae:	f005 f9df 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bb8:	f000 fb44 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000bc4:	f005 f9d4 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bce:	f000 fb39 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000bda:	f005 f9c9 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000be4:	f000 fb2e 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	220c      	movs	r2, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000bf0:	f005 f9be 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000bfa:	f000 fb23 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM2_Init+0x128>)
 8000c00:	f000 fd8c 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200006bc 	.word	0x200006bc

08000c10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	; 0x38
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c42:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <MX_TIM4_Init+0x12c>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c66:	4834      	ldr	r0, [pc, #208]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c68:	f005 f8da 	bl	8005e20 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c72:	f000 fae7 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c80:	4619      	mov	r1, r3
 8000c82:	482d      	ldr	r0, [pc, #180]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c84:	f005 fa32 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000c8e:	f000 fad9 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c92:	4829      	ldr	r0, [pc, #164]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000c94:	f005 f913 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c9e:	f000 fad1 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4821      	ldr	r0, [pc, #132]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000cb2:	f005 fdc9 	bl	8006848 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000cbc:	f000 fac2 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	; 0x60
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000cd8:	f005 f94a 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000ce2:	f000 faaf 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2204      	movs	r2, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000cee:	f005 f93f 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000cf8:	f000 faa4 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2208      	movs	r2, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000d04:	f005 f934 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000d0e:	f000 fa99 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	220c      	movs	r2, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000d1a:	f005 f929 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000d24:	f000 fa8e 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <MX_TIM4_Init+0x128>)
 8000d2a:	f000 fcf7 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000d2e:	bf00      	nop
 8000d30:	3738      	adds	r7, #56	; 0x38
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000404 	.word	0x20000404
 8000d3c:	40000800 	.word	0x40000800

08000d40 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d68:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <MX_TIM9_Init+0xd8>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d8c:	4821      	ldr	r0, [pc, #132]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000d8e:	f005 f847 	bl	8005e20 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 fa54 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4619      	mov	r1, r3
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000daa:	f005 f99f 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000db4:	f000 fa46 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000dba:	f005 f880 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000dc4:	f000 fa3e 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000de0:	f005 f8c6 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000dea:	f000 fa2b 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2204      	movs	r2, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000df6:	f005 f8bb 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8000e00:	f000 fa20 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM9_Init+0xd4>)
 8000e06:	f000 fc89 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000598 	.word	0x20000598
 8000e18:	40014000 	.word	0x40014000

08000e1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <MX_TIM12_Init+0xd8>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000e68:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e6a:	f004 ffd9 	bl	8005e20 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 f9e6 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	4619      	mov	r1, r3
 8000e84:	481a      	ldr	r0, [pc, #104]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e86:	f005 f931 	bl	80060ec <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000e90:	f000 f9d8 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000e96:	f005 f812 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000ea0:	f000 f9d0 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea4:	2360      	movs	r3, #96	; 0x60
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000ebc:	f005 f858 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000ec6:	f000 f9bd 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2204      	movs	r2, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000ed2:	f005 f84d 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8000edc:	f000 f9b2 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM12_Init+0xd4>)
 8000ee2:	f000 fc1b 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	; 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000774 	.word	0x20000774
 8000ef4:	40001800 	.word	0x40001800

08000ef8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_TIM13_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f38:	f004 ff72 	bl	8005e20 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000f42:	f000 f97f 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f48:	f004 ffb9 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 f977 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f56:	2360      	movs	r3, #96	; 0x60
 8000f58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f6e:	f004 ffff 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000f78:	f000 f964 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f7e:	f000 fbcd 	bl	800171c <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200004e8 	.word	0x200004e8
 8000f90:	40001c00 	.word	0x40001c00

08000f94 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_TIM14_Init+0x98>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fd4:	f004 ff24 	bl	8005e20 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000fde:	f000 f931 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_TIM14_Init+0x94>)
 8000fe4:	f004 ff6b 	bl	8005ebe <HAL_TIM_PWM_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000fee:	f000 f929 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff2:	2360      	movs	r3, #96	; 0x60
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM14_Init+0x94>)
 800100a:	f004 ffb1 	bl	8005f70 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001014:	f000 f916 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM14_Init+0x94>)
 800101a:	f000 fb7f 	bl	800171c <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000072c 	.word	0x2000072c
 800102c:	40002000 	.word	0x40002000

08001030 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_UART7_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_UART7_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_UART7_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_UART7_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_UART7_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_UART7_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_UART7_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_UART7_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_UART7_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_UART7_Init+0x4c>)
 8001068:	f005 fcbc 	bl	80069e4 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f8e7 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200003c0 	.word	0x200003c0
 8001080:	40007800 	.word	0x40007800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a61      	ldr	r2, [pc, #388]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a53      	ldr	r2, [pc, #332]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <MX_GPIO_Init+0x1a4>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a45      	ldr	r2, [pc, #276]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <MX_GPIO_Init+0x1a4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <MX_GPIO_Init+0x1a4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a37      	ldr	r2, [pc, #220]	; (8001228 <MX_GPIO_Init+0x1a4>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a30      	ldr	r2, [pc, #192]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_GPIO_Init+0x1a4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CEL_Pin|RN1_Pin|RN2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001180:	482a      	ldr	r0, [pc, #168]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001182:	f001 fbab 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : O2_Pin BAT_Pin BARO_Pin */
  GPIO_InitStruct.Pin = O2_Pin|BAT_Pin|BARO_Pin;
 8001186:	2338      	movs	r3, #56	; 0x38
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <MX_GPIO_Init+0x1ac>)
 800119a:	f001 f9f3 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAP_Pin CLT_Pin */
  GPIO_InitStruct.Pin = MAP_Pin|CLT_Pin;
 800119e:	230c      	movs	r3, #12
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <MX_GPIO_Init+0x1a8>)
 80011b2:	f001 f9e7 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAUNCH_Pin AC_Pin */
  GPIO_InitStruct.Pin = LAUNCH_Pin|AC_Pin;
 80011b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <MX_GPIO_Init+0x1b0>)
 80011cc:	f001 f9da 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011d0:	233c      	movs	r3, #60	; 0x3c
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <MX_GPIO_Init+0x1b4>)
 80011e4:	f001 f9ce 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : CEL_Pin RN1_Pin RN2_Pin */
  GPIO_InitStruct.Pin = CEL_Pin|RN1_Pin|RN2_Pin;
 80011e8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <MX_GPIO_Init+0x1a8>)
 8001202:	f001 f9bf 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Pin CRANK_Pin FLEX_Pin */
  GPIO_InitStruct.Pin = CAM_Pin|CRANK_Pin|FLEX_Pin;
 8001206:	2338      	movs	r3, #56	; 0x38
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_GPIO_Init+0x1b8>)
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_GPIO_Init+0x1bc>)
 800121a:	f001 f9b3 	bl	8002584 <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020800 	.word	0x40020800
 8001234:	40020400 	.word	0x40020400
 8001238:	40021800 	.word	0x40021800
 800123c:	10110000 	.word	0x10110000
 8001240:	40020c00 	.word	0x40020c00

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_ADC_MspInit+0x7c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d127      	bne.n	8001312 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_ADC_MspInit+0x80>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = IAT_Pin|TPS_Pin;
 80012fa:	2303      	movs	r3, #3
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_ADC_MspInit+0x84>)
 800130e:	f001 f939 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40012000 	.word	0x40012000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_CAN_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 8001354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_CAN_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001382:	2303      	movs	r3, #3
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001392:	2309      	movs	r3, #9
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_CAN_MspInit+0x8c>)
 800139e:	f001 f8f1 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40006400 	.word	0x40006400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_I2C_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001406:	2304      	movs	r3, #4
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_I2C_MspInit+0x8c>)
 8001412:	f001 f8b7 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_I2C_MspInit+0x88>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_RTC_MspInit+0x24>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d102      	bne.n	8001460 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RTC_MspInit+0x28>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40002800 	.word	0x40002800
 8001470:	42470e3c 	.word	0x42470e3c

08001474 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_SD_MspInit+0xc0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d14a      	bne.n	800152c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_SD_MspInit+0xc4>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_SD_MspInit+0xc4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014fc:	230c      	movs	r3, #12
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <HAL_SD_MspInit+0xc8>)
 8001508:	f001 f83c 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800150c:	2304      	movs	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800151c:	230c      	movs	r3, #12
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_SD_MspInit+0xcc>)
 8001528:	f001 f82c 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00

08001544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_SPI_MspInit+0x84>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12b      	bne.n	80015be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_SPI_MspInit+0x88>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_SPI_MspInit+0x88>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_SPI_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_SPI_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_SPI_MspInit+0x88>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_SPI_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800159e:	23f0      	movs	r3, #240	; 0xf0
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ae:	2305      	movs	r3, #5
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_SPI_MspInit+0x8c>)
 80015ba:	f000 ffe3 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b08b      	sub	sp, #44	; 0x2c
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a47      	ldr	r2, [pc, #284]	; (8001700 <HAL_TIM_Base_MspInit+0x12c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10e      	bne.n	8001604 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a45      	ldr	r2, [pc, #276]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001602:	e076      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d10e      	bne.n	800162c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a3b      	ldr	r2, [pc, #236]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
}
 800162a:	e062      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <HAL_TIM_Base_MspInit+0x134>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10e      	bne.n	8001654 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
}
 8001652:	e04e      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM9)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2c      	ldr	r2, [pc, #176]	; (800170c <HAL_TIM_Base_MspInit+0x138>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10e      	bne.n	800167c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
}
 800167a:	e03a      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_TIM_Base_MspInit+0x13c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10e      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
}
 80016a2:	e026      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_TIM_Base_MspInit+0x140>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10e      	bne.n	80016cc <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
}
 80016ca:	e012      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM14)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_TIM_Base_MspInit+0x144>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10d      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_TIM_Base_MspInit+0x130>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	bf00      	nop
 80016f4:	372c      	adds	r7, #44	; 0x2c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40010000 	.word	0x40010000
 8001704:	40023800 	.word	0x40023800
 8001708:	40000800 	.word	0x40000800
 800170c:	40014000 	.word	0x40014000
 8001710:	40001800 	.word	0x40001800
 8001714:	40001c00 	.word	0x40001c00
 8001718:	40002000 	.word	0x40002000

0800171c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b090      	sub	sp, #64	; 0x40
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9f      	ldr	r2, [pc, #636]	; (80019b8 <HAL_TIM_MspPostInit+0x29c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d11f      	bne.n	800177e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
 8001742:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a9d      	ldr	r2, [pc, #628]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b9b      	ldr	r3, [pc, #620]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = INJ1_Pin|INJ2_Pin|INJ3_Pin|INJ4_Pin;
 800175a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176c:	2301      	movs	r3, #1
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001774:	4619      	mov	r1, r3
 8001776:	4892      	ldr	r0, [pc, #584]	; (80019c0 <HAL_TIM_MspPostInit+0x2a4>)
 8001778:	f000 ff04 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800177c:	e118      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d13d      	bne.n	8001804 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
 800178c:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a8a      	ldr	r2, [pc, #552]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a83      	ldr	r2, [pc, #524]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IGN1_Pin|IGN2_Pin;
 80017c0:	2303      	movs	r3, #3
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017d0:	2301      	movs	r3, #1
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	487a      	ldr	r0, [pc, #488]	; (80019c4 <HAL_TIM_MspPostInit+0x2a8>)
 80017dc:	f000 fed2 	bl	8002584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IGN3_Pin|IGN4_Pin;
 80017e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f2:	2301      	movs	r3, #1
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4872      	ldr	r0, [pc, #456]	; (80019c8 <HAL_TIM_MspPostInit+0x2ac>)
 80017fe:	f000 fec1 	bl	8002584 <HAL_GPIO_Init>
}
 8001802:	e0d5      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM4)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a70      	ldr	r2, [pc, #448]	; (80019cc <HAL_TIM_MspPostInit+0x2b0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d13e      	bne.n	800188c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a69      	ldr	r2, [pc, #420]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a62      	ldr	r2, [pc, #392]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = VVTD12_Pin|GPIO_PIN_13;
 8001846:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001858:	2302      	movs	r3, #2
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	485b      	ldr	r0, [pc, #364]	; (80019d0 <HAL_TIM_MspPostInit+0x2b4>)
 8001864:	f000 fe8e 	bl	8002584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TACH_Pin|FUELPUMP_Pin;
 8001868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800187a:	2302      	movs	r3, #2
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	4850      	ldr	r0, [pc, #320]	; (80019c8 <HAL_TIM_MspPostInit+0x2ac>)
 8001886:	f000 fe7d 	bl	8002584 <HAL_GPIO_Init>
}
 800188a:	e091      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM9)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_TIM_MspPostInit+0x2b8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11e      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018b2:	2360      	movs	r3, #96	; 0x60
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80018c2:	2303      	movs	r3, #3
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	4619      	mov	r1, r3
 80018cc:	483c      	ldr	r0, [pc, #240]	; (80019c0 <HAL_TIM_MspPostInit+0x2a4>)
 80018ce:	f000 fe59 	bl	8002584 <HAL_GPIO_Init>
}
 80018d2:	e06d      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM12)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <HAL_TIM_MspPostInit+0x2bc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d11f      	bne.n	800191e <HAL_TIM_MspPostInit+0x202>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a35      	ldr	r2, [pc, #212]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FAN_Pin|VVT_Pin;
 80018fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800190c:	2309      	movs	r3, #9
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	482c      	ldr	r0, [pc, #176]	; (80019c8 <HAL_TIM_MspPostInit+0x2ac>)
 8001918:	f000 fe34 	bl	8002584 <HAL_GPIO_Init>
}
 800191c:	e048      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM13)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_TIM_MspPostInit+0x2c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d11f      	bne.n	8001968 <HAL_TIM_MspPostInit+0x24c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a22      	ldr	r2, [pc, #136]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001932:	f043 0320 	orr.w	r3, r3, #32
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BOOST_Pin;
 8001944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001956:	2309      	movs	r3, #9
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(BOOST_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	481f      	ldr	r0, [pc, #124]	; (80019e0 <HAL_TIM_MspPostInit+0x2c4>)
 8001962:	f000 fe0f 	bl	8002584 <HAL_GPIO_Init>
}
 8001966:	e023      	b.n	80019b0 <HAL_TIM_MspPostInit+0x294>
  else if(htim->Instance==TIM14)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_TIM_MspPostInit+0x2c8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d11e      	bne.n	80019b0 <HAL_TIM_MspPostInit+0x294>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_TIM_MspPostInit+0x2a0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IDLE_Pin;
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80019a0:	2309      	movs	r3, #9
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IDLE_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <HAL_TIM_MspPostInit+0x2c4>)
 80019ac:	f000 fdea 	bl	8002584 <HAL_GPIO_Init>
}
 80019b0:	bf00      	nop
 80019b2:	3740      	adds	r7, #64	; 0x40
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40000800 	.word	0x40000800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40014000 	.word	0x40014000
 80019d8:	40001800 	.word	0x40001800
 80019dc:	40001c00 	.word	0x40001c00
 80019e0:	40021400 	.word	0x40021400
 80019e4:	40002000 	.word	0x40002000

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_UART_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_UART_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a42:	23c0      	movs	r3, #192	; 0xc0
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001a52:	2308      	movs	r3, #8
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0x8c>)
 8001a5e:	f000 fd91 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40007800 	.word	0x40007800
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40021400 	.word	0x40021400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f89a 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <OTG_FS_IRQHandler+0x10>)
 8001ad2:	f001 fa2c 	bl	8002f2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001c90 	.word	0x20001c90

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0a:	490e      	ldr	r1, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b20:	4c0b      	ldr	r4, [pc, #44]	; (8001b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2e:	f7ff ffd7 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f009 fa7f 	bl	800b034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7fe fcd5 	bl	80004e4 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001b48:	0800b114 	.word	0x0800b114
  ldr r2, =_sbss
 8001b4c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001b50:	20002098 	.word	0x20002098

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 fcbd 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fb60 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fcd5 	bl	800256a <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f000 fc9d 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	200007bc 	.word	0x200007bc

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200007bc 	.word	0x200007bc

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e033      	b.n	8001d02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fafc 	bl	80012a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cca:	f023 0302 	bic.w	r3, r3, #2
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f94a 	bl	8001f70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf2:	e001      	b.n	8001cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1c>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e113      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x244>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d925      	bls.n	8001d84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	2207      	movs	r2, #7
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4403      	add	r3, r0
 8001d76:	3b1e      	subs	r3, #30
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e022      	b.n	8001dca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	2207      	movs	r2, #7
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4403      	add	r3, r0
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d824      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1a:	e04c      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d824      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b23      	subs	r3, #35	; 0x23
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	; 0x23
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6c:	e023      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b41      	subs	r3, #65	; 0x41
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b41      	subs	r3, #65	; 0x41
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_ADC_ConfigChannel+0x250>)
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_ADC_ConfigChannel+0x254>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_ADC_ConfigChannel+0x254>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_ADC_ConfigChannel+0x258>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b11      	cmp	r3, #17
 8001efe:	d122      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ADC_ConfigChannel+0x258>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d111      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_ADC_ConfigChannel+0x25c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x260>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	40012000 	.word	0x40012000
 8001f64:	10000012 	.word	0x10000012
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b79      	ldr	r3, [pc, #484]	; (8002160 <ADC_Init+0x1f0>)
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <ADC_Init+0x1f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	035a      	lsls	r2, r3, #13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051a      	lsls	r2, r3, #20
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002126:	025a      	lsls	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	029a      	lsls	r2, r3, #10
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	0f000001 	.word	0x0f000001

08002168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0ed      	b.n	8002356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff f8ce 	bl	8001328 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0202 	bic.w	r2, r2, #2
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff fd42 	bl	8001c24 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a2:	e012      	b.n	80021ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a4:	f7ff fd3e 	bl	8001c24 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b0a      	cmp	r3, #10
 80021b0:	d90b      	bls.n	80021ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2205      	movs	r2, #5
 80021c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0c5      	b.n	8002356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e5      	bne.n	80021a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e8:	f7ff fd1c 	bl	8001c24 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ee:	e012      	b.n	8002216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f0:	f7ff fd18 	bl	8001c24 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b0a      	cmp	r3, #10
 80021fc:	d90b      	bls.n	8002216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e09f      	b.n	8002356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0e5      	beq.n	80021f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e1b      	ldrb	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e007      	b.n	800224e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7e5b      	ldrb	r3, [r3, #25]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e007      	b.n	8002278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e9b      	ldrb	r3, [r3, #26]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d108      	bne.n	8002292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e007      	b.n	80022a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0220 	bic.w	r2, r2, #32
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7edb      	ldrb	r3, [r3, #27]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0210 	bic.w	r2, r2, #16
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e007      	b.n	80022cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0210 	orr.w	r2, r2, #16
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7f1b      	ldrb	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0208 	orr.w	r2, r2, #8
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e007      	b.n	80022f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f5b      	ldrb	r3, [r3, #29]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0204 	orr.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e007      	b.n	8002320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	ea42 0103 	orr.w	r1, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e177      	b.n	8002890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 8166 	bne.w	800288a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d005      	beq.n	80025d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d130      	bne.n	8002638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 0201 	and.w	r2, r3, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d017      	beq.n	8002674 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d123      	bne.n	80026c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	08da      	lsrs	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0203 	and.w	r2, r3, #3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80c0 	beq.w	800288a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_GPIO_Init+0x324>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a65      	ldr	r2, [pc, #404]	; (80028a8 <HAL_GPIO_Init+0x324>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_GPIO_Init+0x324>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002726:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_GPIO_Init+0x328>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d037      	beq.n	80027c2 <HAL_GPIO_Init+0x23e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_GPIO_Init+0x23a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_GPIO_Init+0x334>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02b      	beq.n	80027ba <HAL_GPIO_Init+0x236>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x338>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x232>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a54      	ldr	r2, [pc, #336]	; (80028c0 <HAL_GPIO_Init+0x33c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x22e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a53      	ldr	r2, [pc, #332]	; (80028c4 <HAL_GPIO_Init+0x340>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x22a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_GPIO_Init+0x344>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_GPIO_Init+0x348>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_GPIO_Init+0x34c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <HAL_GPIO_Init+0x350>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x21a>
 800279a:	2309      	movs	r3, #9
 800279c:	e012      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 800279e:	230a      	movs	r3, #10
 80027a0:	e010      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027a2:	2308      	movs	r3, #8
 80027a4:	e00e      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00c      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027aa:	2306      	movs	r3, #6
 80027ac:	e00a      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e008      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e004      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027c2:	2300      	movs	r3, #0
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	4093      	lsls	r3, r2
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d4:	4935      	ldr	r1, [pc, #212]	; (80028ac <HAL_GPIO_Init+0x328>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_GPIO_Init+0x354>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002830:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_GPIO_Init+0x354>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f67f ae84 	bls.w	80025a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800
 80028cc:	40021c00 	.word	0x40021c00
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40022400 	.word	0x40022400
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f8:	e003      	b.n	8002902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e12b      	b.n	8002b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fd3e 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	; 0x24
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002974:	f001 ff3a 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8002978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a81      	ldr	r2, [pc, #516]	; (8002b84 <HAL_I2C_Init+0x274>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d807      	bhi.n	8002994 <HAL_I2C_Init+0x84>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a80      	ldr	r2, [pc, #512]	; (8002b88 <HAL_I2C_Init+0x278>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e006      	b.n	80029a2 <HAL_I2C_Init+0x92>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a7d      	ldr	r2, [pc, #500]	; (8002b8c <HAL_I2C_Init+0x27c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0e7      	b.n	8002b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a78      	ldr	r2, [pc, #480]	; (8002b90 <HAL_I2C_Init+0x280>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0c9b      	lsrs	r3, r3, #18
 80029b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a6a      	ldr	r2, [pc, #424]	; (8002b84 <HAL_I2C_Init+0x274>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d802      	bhi.n	80029e4 <HAL_I2C_Init+0xd4>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3301      	adds	r3, #1
 80029e2:	e009      	b.n	80029f8 <HAL_I2C_Init+0xe8>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <HAL_I2C_Init+0x284>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	3301      	adds	r3, #1
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	495c      	ldr	r1, [pc, #368]	; (8002b84 <HAL_I2C_Init+0x274>)
 8002a14:	428b      	cmp	r3, r1
 8002a16:	d819      	bhi.n	8002a4c <HAL_I2C_Init+0x13c>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e59      	subs	r1, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a26:	1c59      	adds	r1, r3, #1
 8002a28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_I2C_Init+0x138>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e59      	subs	r1, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a46:	e051      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e04f      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <HAL_I2C_Init+0x168>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e012      	b.n	8002a9e <HAL_I2C_Init+0x18e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Init+0x196>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e022      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10e      	bne.n	8002acc <HAL_I2C_Init+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e58      	subs	r0, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	440b      	add	r3, r1
 8002abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aca:	e00f      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	0099      	lsls	r1, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6911      	ldr	r1, [r2, #16]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68d2      	ldr	r2, [r2, #12]
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	000186a0 	.word	0x000186a0
 8002b88:	001e847f 	.word	0x001e847f
 8002b8c:	003d08ff 	.word	0x003d08ff
 8002b90:	431bde83 	.word	0x431bde83
 8002b94:	10624dd3 	.word	0x10624dd3

08002b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d129      	bne.n	8002c02 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2224      	movs	r2, #36	; 0x24
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0210 	bic.w	r2, r2, #16
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d12a      	bne.n	8002c80 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2224      	movs	r2, #36	; 0x24
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	89fb      	ldrh	r3, [r7, #14]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	89fa      	ldrh	r2, [r7, #14]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c90:	b08f      	sub	sp, #60	; 0x3c
 8002c92:	af0a      	add	r7, sp, #40	; 0x28
 8002c94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e10f      	b.n	8002ec0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f007 fea6 	bl	800aa0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 fe43 	bl	800796a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	687e      	ldr	r6, [r7, #4]
 8002cec:	466d      	mov	r5, sp
 8002cee:	f106 0410 	add.w	r4, r6, #16
 8002cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d02:	1d33      	adds	r3, r6, #4
 8002d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	f004 fd1a 	bl	8007740 <USB_CoreInit>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0d0      	b.n	8002ec0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fe31 	bl	800798c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e04a      	b.n	8002dc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333d      	adds	r3, #61	; 0x3d
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	333c      	adds	r3, #60	; 0x3c
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	b298      	uxth	r0, r3
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3342      	adds	r3, #66	; 0x42
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333f      	adds	r3, #63	; 0x3f
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	3344      	adds	r3, #68	; 0x44
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3348      	adds	r3, #72	; 0x48
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3350      	adds	r3, #80	; 0x50
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3af      	bcc.n	8002d30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e044      	b.n	8002e60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3b5      	bcc.n	8002dd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	687e      	ldr	r6, [r7, #4]
 8002e72:	466d      	mov	r5, sp
 8002e74:	f106 0410 	add.w	r4, r6, #16
 8002e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e88:	1d33      	adds	r3, r6, #4
 8002e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f004 fda7 	bl	80079e0 <USB_DevInit>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e00d      	b.n	8002ec0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fdef 	bl	8008a9c <USB_DevDisconnect>

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_PCD_Start+0x1c>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e020      	b.n	8002f26 <HAL_PCD_Start+0x5e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d109      	bne.n	8002f08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d005      	beq.n	8002f08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f004 fd1b 	bl	8007948 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 fd9f 	bl	8008a5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f2e:	b590      	push	{r4, r7, lr}
 8002f30:	b08d      	sub	sp, #52	; 0x34
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f005 fe5d 	bl	8008c04 <USB_GetMode>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 839d 	bne.w	800368c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fdc1 	bl	8008ade <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8393 	beq.w	800368a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f005 fdb8 	bl	8008ade <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d107      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f002 0202 	and.w	r2, r2, #2
 8002f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f005 fda6 	bl	8008ade <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d161      	bne.n	8003060 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	0c5b      	lsrs	r3, r3, #17
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d124      	bne.n	8003022 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d035      	beq.n	8003050 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6a38      	ldr	r0, [r7, #32]
 8002ff8:	f005 fc0c 	bl	8008814 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003008:	441a      	add	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301a:	441a      	add	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	619a      	str	r2, [r3, #24]
 8003020:	e016      	b.n	8003050 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	0c5b      	lsrs	r3, r3, #17
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	2b06      	cmp	r3, #6
 800302c:	d110      	bne.n	8003050 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003034:	2208      	movs	r2, #8
 8003036:	4619      	mov	r1, r3
 8003038:	6a38      	ldr	r0, [r7, #32]
 800303a:	f005 fbeb 	bl	8008814 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304a:	441a      	add	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0210 	orr.w	r2, r2, #16
 800305e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fd3a 	bl	8008ade <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003070:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003074:	d16e      	bne.n	8003154 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f005 fd40 	bl	8008b04 <USB_ReadDevAllOutEpInterrupt>
 8003084:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003086:	e062      	b.n	800314e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d057      	beq.n	8003142 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f005 fd65 	bl	8008b6c <USB_ReadDevOutEPInterrupt>
 80030a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	461a      	mov	r2, r3
 80030bc:	2301      	movs	r3, #1
 80030be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fdb0 	bl	8003c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	2308      	movs	r3, #8
 80030e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 feaa 	bl	8003e40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	2310      	movs	r3, #16
 8003106:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	2320      	movs	r3, #32
 8003122:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003140:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	d199      	bne.n	8003088 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f005 fcc0 	bl	8008ade <USB_ReadInterrupts>
 800315e:	4603      	mov	r3, r0
 8003160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003168:	f040 80c0 	bne.w	80032ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f005 fce1 	bl	8008b38 <USB_ReadDevAllInEpInterrupt>
 8003176:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800317c:	e0b2      	b.n	80032e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a7 	beq.w	80032d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f005 fd07 	bl	8008ba8 <USB_ReadDevInEPInterrupt>
 800319a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d057      	beq.n	8003256 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69f9      	ldr	r1, [r7, #28]
 80031c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c6:	4013      	ands	r3, r2
 80031c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d6:	461a      	mov	r2, r3
 80031d8:	2301      	movs	r3, #1
 80031da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d132      	bne.n	800324a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4403      	add	r3, r0
 8003204:	3344      	adds	r3, #68	; 0x44
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4419      	add	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4403      	add	r3, r0
 8003218:	3348      	adds	r3, #72	; 0x48
 800321a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <HAL_PCD_IRQHandler+0x31c>
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3350      	adds	r3, #80	; 0x50
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003242:	461a      	mov	r2, r3
 8003244:	2101      	movs	r1, #1
 8003246:	f005 fd0f 	bl	8008c68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f007 fc5c 	bl	800ab0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	461a      	mov	r2, r3
 800326e:	2308      	movs	r3, #8
 8003270:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003288:	461a      	mov	r2, r3
 800328a:	2310      	movs	r3, #16
 800328c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a4:	461a      	mov	r2, r3
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c0:	461a      	mov	r2, r3
 80032c2:	2302      	movs	r3, #2
 80032c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fc1b 	bl	8003b0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3301      	adds	r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f47f af49 	bne.w	800317e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f005 fbf4 	bl	8008ade <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003300:	d122      	bne.n	8003348 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800331c:	2b01      	cmp	r3, #1
 800331e:	d108      	bne.n	8003332 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003328:	2100      	movs	r1, #0
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fe26 	bl	8003f7c <HAL_PCDEx_LPM_Callback>
 8003330:	e002      	b.n	8003338 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f007 fc62 	bl	800abfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f005 fbc6 	bl	8008ade <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335c:	d112      	bne.n	8003384 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f007 fc1e 	bl	800abb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003382:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f005 fba8 	bl	8008ade <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	f040 80c7 	bne.w	800352a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2110      	movs	r1, #16
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 fc76 	bl	8007ca8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c0:	e056      	b.n	8003470 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003406:	0151      	lsls	r1, r2, #5
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	440a      	add	r2, r1
 800340c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003410:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003414:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003428:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	440a      	add	r2, r1
 8003440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003448:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345a:	0151      	lsls	r1, r2, #5
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	440a      	add	r2, r1
 8003460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003468:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	3301      	adds	r3, #1
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003476:	429a      	cmp	r2, r3
 8003478:	d3a3      	bcc.n	80033c2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800348c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a6:	f043 030b 	orr.w	r3, r3, #11
 80034aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f043 030b 	orr.w	r3, r3, #11
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	e015      	b.n	80034f0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ea:	f043 030b 	orr.w	r3, r3, #11
 80034ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003502:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003514:	461a      	mov	r2, r3
 8003516:	f005 fba7 	bl	8008c68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f005 fad5 	bl	8008ade <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	d124      	bne.n	800358a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f005 fb6b 	bl	8008c20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f004 fc0b 	bl	8007d6a <USB_GetDevSpeed>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681c      	ldr	r4, [r3, #0]
 8003560:	f001 f938 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8003564:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4620      	mov	r0, r4
 8003570:	f004 f948 	bl	8007804 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f007 faf2 	bl	800ab5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003588:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 faa5 	bl	8008ade <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d10a      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f007 facf 	bl	800ab42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f002 0208 	and.w	r2, r2, #8
 80035b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 fa90 	bl	8008ade <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c8:	d10f      	bne.n	80035ea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f007 fb31 	bl	800ac3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f005 fa75 	bl	8008ade <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fe:	d10f      	bne.n	8003620 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f007 fb04 	bl	800ac18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800361e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f005 fa5a 	bl	8008ade <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d10a      	bne.n	800364c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f007 fb12 	bl	800ac60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800364a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fa44 	bl	8008ade <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d115      	bne.n	800368c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f007 fb02 	bl	800ac7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e000      	b.n	800368c <HAL_PCD_IRQHandler+0x75e>
      return;
 800368a:	bf00      	nop
    }
  }
}
 800368c:	3734      	adds	r7, #52	; 0x34
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}

08003692 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_SetAddress+0x1a>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e013      	b.n	80036d4 <HAL_PCD_SetAddress+0x42>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f005 f9a2 	bl	8008a0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	4608      	mov	r0, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	70fb      	strb	r3, [r7, #3]
 80036ee:	460b      	mov	r3, r1
 80036f0:	803b      	strh	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da0f      	bge.n	8003722 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3338      	adds	r3, #56	; 0x38
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	705a      	strb	r2, [r3, #1]
 8003720:	e00f      	b.n	8003742 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800374e:	883a      	ldrh	r2, [r7, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	78ba      	ldrb	r2, [r7, #2]
 8003758:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800376c:	78bb      	ldrb	r3, [r7, #2]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d102      	bne.n	8003778 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_PCD_EP_Open+0xaa>
 8003782:	2302      	movs	r3, #2
 8003784:	e00e      	b.n	80037a4 <HAL_PCD_EP_Open+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fb0d 	bl	8007db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037a2:	7afb      	ldrb	r3, [r7, #11]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da0f      	bge.n	80037e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 020f 	and.w	r2, r3, #15
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	3338      	adds	r3, #56	; 0x38
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	705a      	strb	r2, [r3, #1]
 80037de:	e00f      	b.n	8003800 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_PCD_EP_Close+0x6e>
 8003816:	2302      	movs	r3, #2
 8003818:	e00e      	b.n	8003838 <HAL_PCD_EP_Close+0x8c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	4618      	mov	r0, r3
 800382a:	f004 fb4b 	bl	8007ec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	460b      	mov	r3, r1
 800384e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003850:	7afb      	ldrb	r3, [r7, #11]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	b2da      	uxtb	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d102      	bne.n	800389c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	f004 fe26 	bl	8008504 <USB_EP0StartXfer>
 80038b8:	e008      	b.n	80038cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	f004 fbd8 	bl	800807c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038f8:	681b      	ldr	r3, [r3, #0]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	460b      	mov	r3, r1
 8003914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3338      	adds	r3, #56	; 0x38
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003946:	7afb      	ldrb	r3, [r7, #11]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	b2da      	uxtb	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	f004 fdc4 	bl	8008504 <USB_EP0StartXfer>
 800397c:	e008      	b.n	8003990 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	f004 fb76 	bl	800807c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d901      	bls.n	80039b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e050      	b.n	8003a5a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da0f      	bge.n	80039e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 020f 	and.w	r2, r3, #15
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3338      	adds	r3, #56	; 0x38
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	705a      	strb	r2, [r3, #1]
 80039de:	e00d      	b.n	80039fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	3304      	adds	r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_EP_SetStall+0x82>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e01e      	b.n	8003a5a <HAL_PCD_EP_SetStall+0xc0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 ff1b 	bl	8008866 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	b2d9      	uxtb	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f005 f90c 	bl	8008c68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d901      	bls.n	8003a80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e042      	b.n	8003b06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da0f      	bge.n	8003aa8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3338      	adds	r3, #56	; 0x38
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	705a      	strb	r2, [r3, #1]
 8003aa6:	e00f      	b.n	8003ac8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_PCD_EP_ClrStall+0x86>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e00e      	b.n	8003b06 <HAL_PCD_EP_ClrStall+0xa4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 ff23 	bl	8008942 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d901      	bls.n	8003b46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e06c      	b.n	8003c20 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d902      	bls.n	8003b62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3303      	adds	r3, #3
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b6a:	e02b      	b.n	8003bc4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3303      	adds	r3, #3
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68d9      	ldr	r1, [r3, #12]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f004 fdff 	bl	80087aa <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	441a      	add	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d809      	bhi.n	8003bee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d203      	bcs.n	8003bee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1be      	bne.n	8003b6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d811      	bhi.n	8003c1e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	2201      	movs	r2, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	6939      	ldr	r1, [r7, #16]
 8003c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	333c      	adds	r3, #60	; 0x3c
 8003c40:	3304      	adds	r3, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	f040 80a0 	bne.w	8003da0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a72      	ldr	r2, [pc, #456]	; (8003e38 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f240 80dd 	bls.w	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80d7 	beq.w	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e0cb      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	461a      	mov	r2, r3
 8003cae:	2320      	movs	r3, #32
 8003cb0:	6093      	str	r3, [r2, #8]
 8003cb2:	e0bc      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 80b7 	bne.w	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a5d      	ldr	r2, [pc, #372]	; (8003e38 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d90f      	bls.n	8003ce8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce4:	6093      	str	r3, [r2, #8]
 8003ce6:	e0a2      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cfa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	0159      	lsls	r1, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d0e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4403      	add	r3, r0
 8003d1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d22:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4403      	add	r3, r0
 8003d46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4419      	add	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4403      	add	r3, r0
 8003d5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d60:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d114      	bne.n	8003d92 <PCD_EP_OutXfrComplete_int+0x16a>
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	f004 ff6b 	bl	8008c68 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f006 fe9d 	bl	800aad8 <HAL_PCD_DataOutStageCallback>
 8003d9e:	e046      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <PCD_EP_OutXfrComplete_int+0x214>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d124      	bne.n	8003df2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc4:	6093      	str	r3, [r2, #8]
 8003dc6:	e032      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	2320      	movs	r3, #32
 8003de2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f006 fe74 	bl	800aad8 <HAL_PCD_DataOutStageCallback>
 8003df0:	e01d      	b.n	8003e2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d114      	bne.n	8003e22 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	f004 ff23 	bl	8008c68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f006 fe55 	bl	800aad8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	4f54300a 	.word	0x4f54300a
 8003e3c:	4f54310a 	.word	0x4f54310a

08003e40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	333c      	adds	r3, #60	; 0x3c
 8003e58:	3304      	adds	r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d90e      	bls.n	8003e94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f006 fe0d 	bl	800aab4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d90c      	bls.n	8003ebc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f004 fed6 	bl	8008c68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	4f54300a 	.word	0x4f54300a

08003ecc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eea:	883b      	ldrh	r3, [r7, #0]
 8003eec:	0419      	lsls	r1, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e028      	b.n	8003f4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e00d      	b.n	8003f2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3340      	adds	r3, #64	; 0x40
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	3301      	adds	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3ec      	bcc.n	8003f0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f34:	883b      	ldrh	r3, [r7, #0]
 8003f36:	0418      	lsls	r0, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4302      	orrs	r2, r0
 8003f44:	3340      	adds	r3, #64	; 0x40
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e264      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d075      	beq.n	800409e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	4ba3      	ldr	r3, [pc, #652]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbe:	4ba0      	ldr	r3, [pc, #640]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d112      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fca:	4b9d      	ldr	r3, [pc, #628]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	4b99      	ldr	r3, [pc, #612]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05b      	beq.n	800409c <HAL_RCC_OscConfig+0x108>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d157      	bne.n	800409c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e23f      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x74>
 8003ffa:	4b91      	ldr	r3, [pc, #580]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a90      	ldr	r2, [pc, #576]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x98>
 8004012:	4b8b      	ldr	r3, [pc, #556]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a8a      	ldr	r2, [pc, #552]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b88      	ldr	r3, [pc, #544]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a87      	ldr	r2, [pc, #540]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 800402c:	4b84      	ldr	r3, [pc, #528]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a83      	ldr	r2, [pc, #524]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b81      	ldr	r3, [pc, #516]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a80      	ldr	r2, [pc, #512]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd fdea 	bl	8001c24 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd fde6 	bl	8001c24 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e204      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xc0>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd fdd6 	bl	8001c24 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407c:	f7fd fdd2 	bl	8001c24 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1f0      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	4b6c      	ldr	r3, [pc, #432]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0xe8>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d063      	beq.n	8004172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b62      	ldr	r3, [pc, #392]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b5f      	ldr	r3, [pc, #380]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b5c      	ldr	r3, [pc, #368]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1c4      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b56      	ldr	r3, [pc, #344]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4952      	ldr	r1, [pc, #328]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e03a      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b4f      	ldr	r3, [pc, #316]	; (8004244 <HAL_RCC_OscConfig+0x2b0>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fd8b 	bl	8001c24 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004112:	f7fd fd87 	bl	8001c24 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1a5      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	4b46      	ldr	r3, [pc, #280]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b43      	ldr	r3, [pc, #268]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4940      	ldr	r1, [pc, #256]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_OscConfig+0x2b0>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fd6a 	bl	8001c24 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7fd fd66 	bl	8001c24 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e184      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b36      	ldr	r3, [pc, #216]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d030      	beq.n	80041e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b30      	ldr	r3, [pc, #192]	; (8004248 <HAL_RCC_OscConfig+0x2b4>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fd4a 	bl	8001c24 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004194:	f7fd fd46 	bl	8001c24 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e164      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	4b26      	ldr	r3, [pc, #152]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x200>
 80041b2:	e015      	b.n	80041e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x2b4>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fd fd33 	bl	8001c24 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fd fd2f 	bl	8001c24 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e14d      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a0 	beq.w	800432e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_OscConfig+0x2b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d121      	bne.n	800426e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_RCC_OscConfig+0x2b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <HAL_RCC_OscConfig+0x2b8>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd fcf5 	bl	8001c24 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	e011      	b.n	8004262 <HAL_RCC_OscConfig+0x2ce>
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	42470000 	.word	0x42470000
 8004248:	42470e80 	.word	0x42470e80
 800424c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fd fce8 	bl	8001c24 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e106      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b85      	ldr	r3, [pc, #532]	; (8004478 <HAL_RCC_OscConfig+0x4e4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x2f0>
 8004276:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a80      	ldr	r2, [pc, #512]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	e01c      	b.n	80042be <HAL_RCC_OscConfig+0x32a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x312>
 800428c:	4b7b      	ldr	r3, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a7a      	ldr	r2, [pc, #488]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b78      	ldr	r3, [pc, #480]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a77      	ldr	r2, [pc, #476]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x32a>
 80042a6:	4b75      	ldr	r3, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a74      	ldr	r2, [pc, #464]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b72      	ldr	r3, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a71      	ldr	r2, [pc, #452]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd fcad 	bl	8001c24 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fca9 	bl	8001c24 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0c5      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCC_OscConfig+0x33a>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fc97 	bl	8001c24 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fc93 	bl	8001c24 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0af      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	4b5a      	ldr	r3, [pc, #360]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b56      	ldr	r3, [pc, #344]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a55      	ldr	r2, [pc, #340]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 809b 	beq.w	800446e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d05c      	beq.n	80043fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d141      	bne.n	80043d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCC_OscConfig+0x4ec>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fd fc67 	bl	8001c24 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7fd fc63 	bl	8001c24 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e081      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436c:	4b43      	ldr	r3, [pc, #268]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	019b      	lsls	r3, r3, #6
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	3b01      	subs	r3, #1
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	4937      	ldr	r1, [pc, #220]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCC_OscConfig+0x4ec>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd fc3c 	bl	8001c24 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd fc38 	bl	8001c24 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e056      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x41c>
 80043ce:	e04e      	b.n	800446e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCC_OscConfig+0x4ec>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d6:	f7fd fc25 	bl	8001c24 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043de:	f7fd fc21 	bl	8001c24 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e03f      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x44a>
 80043fc:	e037      	b.n	800446e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e032      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800440a:	4b1c      	ldr	r3, [pc, #112]	; (800447c <HAL_RCC_OscConfig+0x4e8>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d028      	beq.n	800446a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d121      	bne.n	800446a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d11a      	bne.n	800446a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800443a:	4013      	ands	r3, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004440:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004442:	4293      	cmp	r3, r2
 8004444:	d111      	bne.n	800446a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d107      	bne.n	800446a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40007000 	.word	0x40007000
 800447c:	40023800 	.word	0x40023800
 8004480:	42470060 	.word	0x42470060

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0cc      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b68      	ldr	r3, [pc, #416]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d90c      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b8      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f0:	4b53      	ldr	r3, [pc, #332]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a52      	ldr	r2, [pc, #328]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	494d      	ldr	r1, [pc, #308]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d044      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d119      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e07f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3b      	ldr	r3, [pc, #236]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e067      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4934      	ldr	r1, [pc, #208]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fd fb56 	bl	8001c24 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fd fb52 	bl	8001c24 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e04f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20c      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e032      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4916      	ldr	r1, [pc, #88]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	490e      	ldr	r1, [pc, #56]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800460a:	f000 f82d 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 800460e:	4602      	mov	r2, r0
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	490a      	ldr	r1, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	5ccb      	ldrb	r3, [r1, r3]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fab6 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023c00 	.word	0x40023c00
 8004640:	40023800 	.word	0x40023800
 8004644:	0800b0ec 	.word	0x0800b0ec
 8004648:	20000000 	.word	0x20000000
 800464c:	20000004 	.word	0x20000004

08004650 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_RCC_EnableCSS+0x14>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	4247004c 	.word	0x4247004c

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800466e:	2100      	movs	r1, #0
 8004670:	6079      	str	r1, [r7, #4]
 8004672:	2100      	movs	r1, #0
 8004674:	60f9      	str	r1, [r7, #12]
 8004676:	2100      	movs	r1, #0
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800467a:	2100      	movs	r1, #0
 800467c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467e:	4952      	ldr	r1, [pc, #328]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004680:	6889      	ldr	r1, [r1, #8]
 8004682:	f001 010c 	and.w	r1, r1, #12
 8004686:	2908      	cmp	r1, #8
 8004688:	d00d      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x3e>
 800468a:	2908      	cmp	r1, #8
 800468c:	f200 8094 	bhi.w	80047b8 <HAL_RCC_GetSysClockFreq+0x150>
 8004690:	2900      	cmp	r1, #0
 8004692:	d002      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x32>
 8004694:	2904      	cmp	r1, #4
 8004696:	d003      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x38>
 8004698:	e08e      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469a:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <HAL_RCC_GetSysClockFreq+0x164>)
 800469c:	60bb      	str	r3, [r7, #8]
       break;
 800469e:	e08e      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80046a2:	60bb      	str	r3, [r7, #8]
      break;
 80046a4:	e08b      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a6:	4948      	ldr	r1, [pc, #288]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80046a8:	6849      	ldr	r1, [r1, #4]
 80046aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80046ae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b0:	4945      	ldr	r1, [pc, #276]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80046b2:	6849      	ldr	r1, [r1, #4]
 80046b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d024      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046bc:	4942      	ldr	r1, [pc, #264]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80046be:	6849      	ldr	r1, [r1, #4]
 80046c0:	0989      	lsrs	r1, r1, #6
 80046c2:	4608      	mov	r0, r1
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80046cc:	f04f 0500 	mov.w	r5, #0
 80046d0:	ea00 0204 	and.w	r2, r0, r4
 80046d4:	ea01 0305 	and.w	r3, r1, r5
 80046d8:	493d      	ldr	r1, [pc, #244]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80046da:	fb01 f003 	mul.w	r0, r1, r3
 80046de:	2100      	movs	r1, #0
 80046e0:	fb01 f102 	mul.w	r1, r1, r2
 80046e4:	1844      	adds	r4, r0, r1
 80046e6:	493a      	ldr	r1, [pc, #232]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80046e8:	fba2 0101 	umull	r0, r1, r2, r1
 80046ec:	1863      	adds	r3, r4, r1
 80046ee:	4619      	mov	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	f7fb fd78 	bl	80001ec <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e04a      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	461a      	mov	r2, r3
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	ea02 0400 	and.w	r4, r2, r0
 800471e:	ea03 0501 	and.w	r5, r3, r1
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	014b      	lsls	r3, r1, #5
 8004730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004734:	0142      	lsls	r2, r0, #5
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	1b00      	subs	r0, r0, r4
 800473c:	eb61 0105 	sbc.w	r1, r1, r5
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	018b      	lsls	r3, r1, #6
 800474a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800474e:	0182      	lsls	r2, r0, #6
 8004750:	1a12      	subs	r2, r2, r0
 8004752:	eb63 0301 	sbc.w	r3, r3, r1
 8004756:	f04f 0000 	mov.w	r0, #0
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	00d9      	lsls	r1, r3, #3
 8004760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004764:	00d0      	lsls	r0, r2, #3
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	1912      	adds	r2, r2, r4
 800476c:	eb45 0303 	adc.w	r3, r5, r3
 8004770:	f04f 0000 	mov.w	r0, #0
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	0299      	lsls	r1, r3, #10
 800477a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800477e:	0290      	lsls	r0, r2, #10
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f7fb fd2c 	bl	80001ec <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	3301      	adds	r3, #1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	60bb      	str	r3, [r7, #8]
      break;
 80047b6:	e002      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_RCC_GetSysClockFreq+0x164>)
 80047ba:	60bb      	str	r3, [r7, #8]
      break;
 80047bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047be:	68bb      	ldr	r3, [r7, #8]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bdb0      	pop	{r4, r5, r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	017d7840 	.word	0x017d7840

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800b0fc 	.word	0x0800b0fc

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	0800b0fc 	.word	0x0800b0fc

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	d075      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004870:	4bad      	ldr	r3, [pc, #692]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004876:	f7fd f9d5 	bl	8001c24 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800487e:	f7fd f9d1 	bl	8001c24 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e18b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	4ba6      	ldr	r3, [pc, #664]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	019a      	lsls	r2, r3, #6
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	071b      	lsls	r3, r3, #28
 80048b4:	499d      	ldr	r1, [pc, #628]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048c8:	4b98      	ldr	r3, [pc, #608]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	0f1b      	lsrs	r3, r3, #28
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	019a      	lsls	r2, r3, #6
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	431a      	orrs	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	071b      	lsls	r3, r3, #28
 80048e8:	4990      	ldr	r1, [pc, #576]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048f0:	4b8e      	ldr	r3, [pc, #568]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f6:	f023 021f 	bic.w	r2, r3, #31
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	3b01      	subs	r3, #1
 8004900:	498a      	ldr	r1, [pc, #552]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	019a      	lsls	r2, r3, #6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	071b      	lsls	r3, r3, #28
 8004928:	4980      	ldr	r1, [pc, #512]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004930:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004936:	f7fd f975 	bl	8001c24 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800493e:	f7fd f971 	bl	8001c24 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e12b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004950:	4b76      	ldr	r3, [pc, #472]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004970:	2b00      	cmp	r3, #0
 8004972:	d079      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004974:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800497a:	f7fd f953 	bl	8001c24 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004982:	f7fd f94f 	bl	8001c24 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e109      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004994:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d0ef      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d020      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049ae:	4b5f      	ldr	r3, [pc, #380]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	0f1b      	lsrs	r3, r3, #28
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	019a      	lsls	r2, r3, #6
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	061b      	lsls	r3, r3, #24
 80049c8:	431a      	orrs	r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	071b      	lsls	r3, r3, #28
 80049ce:	4957      	ldr	r1, [pc, #348]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049d6:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4950      	ldr	r1, [pc, #320]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	0e1b      	lsrs	r3, r3, #24
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	071b      	lsls	r3, r3, #28
 8004a1c:	4943      	ldr	r1, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a24:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	493e      	ldr	r1, [pc, #248]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fd f8f0 	bl	8001c24 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a48:	f7fd f8ec 	bl	8001c24 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0a6      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a5a:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a66:	d1ef      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 808d 	beq.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f8c1 	bl	8001c24 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fd f8bd 	bl	8001c24 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e077      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004acc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d039      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d032      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d11e      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fd f88b 	bl	8001c24 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b10:	e014      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fd f887 	bl	8001c24 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d90b      	bls.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e03f      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004b28:	42470068 	.word	0x42470068
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	42470070 	.word	0x42470070
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0e4      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	4911      	ldr	r1, [pc, #68]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]
 8004b70:	e005      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	4a0e      	ldr	r2, [pc, #56]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b7c:	6093      	str	r3, [r2, #8]
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	4909      	ldr	r1, [pc, #36]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004ba2:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ba4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	424711e0 	.word	0x424711e0

08004bb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e083      	b.n	8004cd2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7f5b      	ldrb	r3, [r3, #29]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fc34 	bl	8001448 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	22ca      	movs	r2, #202	; 0xca
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2253      	movs	r2, #83	; 0x53
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9fb 	bl	8004ff2 <RTC_EnterInitMode>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e05e      	b.n	8004cd2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6899      	ldr	r1, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6919      	ldr	r1, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	041a      	lsls	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10e      	bne.n	8004ca0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f98d 	bl	8004fa2 <HAL_RTC_WaitForSynchro>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e018      	b.n	8004cd2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	22ff      	movs	r2, #255	; 0xff
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cda:	b590      	push	{r4, r7, lr}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	7f1b      	ldrb	r3, [r3, #28]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RTC_SetTime+0x1c>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e0aa      	b.n	8004e4c <HAL_RTC_SetTime+0x172>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d126      	bne.n	8004d56 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f992 	bl	800504a <RTC_ByteToBcd2>
 8004d26:	4603      	mov	r3, r0
 8004d28:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	785b      	ldrb	r3, [r3, #1]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f98b 	bl	800504a <RTC_ByteToBcd2>
 8004d34:	4603      	mov	r3, r0
 8004d36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d38:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	789b      	ldrb	r3, [r3, #2]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f983 	bl	800504a <RTC_ByteToBcd2>
 8004d44:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	78db      	ldrb	r3, [r3, #3]
 8004d4e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e018      	b.n	8004d88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d76:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	78db      	ldrb	r3, [r3, #3]
 8004d82:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	22ca      	movs	r2, #202	; 0xca
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2253      	movs	r2, #83	; 0x53
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f92a 	bl	8004ff2 <RTC_EnterInitMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2204      	movs	r2, #4
 8004db0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e047      	b.n	8004e4c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004dc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004dca:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dda:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6899      	ldr	r1, [r3, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d111      	bne.n	8004e36 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f8c5 	bl	8004fa2 <HAL_RTC_WaitForSynchro>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00b      	beq.n	8004e36 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00a      	b.n	8004e4c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	22ff      	movs	r2, #255	; 0xff
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	7f1b      	ldrb	r3, [r3, #28]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_RTC_SetDate+0x1c>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e094      	b.n	8004f9a <HAL_RTC_SetDate+0x146>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10e      	bne.n	8004ea0 <HAL_RTC_SetDate+0x4c>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	330a      	adds	r3, #10
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11c      	bne.n	8004ee0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	78db      	ldrb	r3, [r3, #3]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8cd 	bl	800504a <RTC_ByteToBcd2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f8c6 	bl	800504a <RTC_ByteToBcd2>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ec2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	789b      	ldrb	r3, [r3, #2]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f8be 	bl	800504a <RTC_ByteToBcd2>
 8004ece:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ed0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e00e      	b.n	8004efe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	78db      	ldrb	r3, [r3, #3]
 8004ee4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ef2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	22ca      	movs	r2, #202	; 0xca
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2253      	movs	r2, #83	; 0x53
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f86f 	bl	8004ff2 <RTC_EnterInitMode>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	22ff      	movs	r2, #255	; 0xff
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2204      	movs	r2, #4
 8004f26:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e033      	b.n	8004f9a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f81e 	bl	8004fa2 <HAL_RTC_WaitForSynchro>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	22ff      	movs	r2, #255	; 0xff
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2204      	movs	r2, #4
 8004f78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e00a      	b.n	8004f9a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	22ff      	movs	r2, #255	; 0xff
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}

08004fa2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fe31 	bl	8001c24 <HAL_GetTick>
 8004fc2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fc4:	e009      	b.n	8004fda <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fc6:	f7fc fe2d 	bl	8001c24 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd4:	d901      	bls.n	8004fda <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e007      	b.n	8004fea <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d119      	bne.n	8005040 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005014:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fc fe05 	bl	8001c24 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800501c:	e009      	b.n	8005032 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800501e:	f7fc fe01 	bl	8001c24 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502c:	d901      	bls.n	8005032 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e007      	b.n	8005042 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ee      	beq.n	800501e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	4603      	mov	r3, r0
 8005052:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005058:	e005      	b.n	8005066 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	3b0a      	subs	r3, #10
 8005064:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d8f6      	bhi.n	800505a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	b2da      	uxtb	r2, r3
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	4313      	orrs	r3, r2
 8005078:	b2db      	uxtb	r3, r3
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	7f1b      	ldrb	r3, [r3, #28]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 800509e:	2302      	movs	r3, #2
 80050a0:	e081      	b.n	80051a6 <HAL_RTCEx_SetWakeUpTimer+0x120>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2202      	movs	r2, #2
 80050ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	22ca      	movs	r2, #202	; 0xca
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2253      	movs	r2, #83	; 0x53
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80050cc:	f7fc fdaa 	bl	8001c24 <HAL_GetTick>
 80050d0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80050d2:	e013      	b.n	80050fc <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050d4:	f7fc fda6 	bl	8001c24 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e2:	d90b      	bls.n	80050fc <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2203      	movs	r2, #3
 80050f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e054      	b.n	80051a6 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e4      	bne.n	80050d4 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800511a:	f7fc fd83 	bl	8001c24 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005120:	e013      	b.n	800514a <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005122:	f7fc fd7f 	bl	8001c24 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005130:	d90b      	bls.n	800514a <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2203      	movs	r2, #3
 800513e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e02d      	b.n	80051a6 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0e4      	beq.n	8005122 <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0207 	bic.w	r2, r2, #7
 8005166:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	615a      	str	r2, [r3, #20]

   /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800518e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e022      	b.n	8005206 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc f94e 	bl	8001474 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f815 	bl	8005210 <HAL_SD_InitCard>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e00a      	b.n	8005206 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005210:	b5b0      	push	{r4, r5, r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af04      	add	r7, sp, #16
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800522c:	2376      	movs	r3, #118	; 0x76
 800522e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681d      	ldr	r5, [r3, #0]
 8005234:	466c      	mov	r4, sp
 8005236:	f107 0314 	add.w	r3, r7, #20
 800523a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800523e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005248:	4628      	mov	r0, r5
 800524a:	f001 fde1 	bl	8006e10 <SDIO_Init>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e04c      	b.n	80052fa <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_SD_InitCard+0xf4>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fe08 	bl	8006e80 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_SD_InitCard+0xf4>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb52 	bl	8005920 <SD_PowerON>
 800527c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e02e      	b.n	80052fa <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa73 	bl	8005788 <SD_InitCard>
 80052a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e01b      	b.n	80052fa <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fe6b 	bl	8006fa6 <SDMMC_CmdBlockLength>
 80052d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00f      	beq.n	80052f8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <HAL_SD_InitCard+0xf8>)
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3728      	adds	r7, #40	; 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bdb0      	pop	{r4, r5, r7, pc}
 8005302:	bf00      	nop
 8005304:	422580a0 	.word	0x422580a0
 8005308:	004005ff 	.word	0x004005ff

0800530c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531a:	0f9b      	lsrs	r3, r3, #30
 800531c:	b2da      	uxtb	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005326:	0e9b      	lsrs	r3, r3, #26
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005338:	0e1b      	lsrs	r3, r3, #24
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	b2da      	uxtb	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	b2da      	uxtb	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	b2da      	uxtb	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005362:	b2da      	uxtb	r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800536c:	0d1b      	lsrs	r3, r3, #20
 800536e:	b29a      	uxth	r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	b2da      	uxtb	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538a:	0bdb      	lsrs	r3, r3, #15
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	b2da      	uxtb	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539c:	0b9b      	lsrs	r3, r3, #14
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ae:	0b5b      	lsrs	r3, r3, #13
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c0:	0b1b      	lsrs	r3, r3, #12
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d163      	bne.n	80054a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e0:	009a      	lsls	r2, r3, #2
 80053e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053e6:	4013      	ands	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80053ec:	0f92      	lsrs	r2, r2, #30
 80053ee:	431a      	orrs	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	0edb      	lsrs	r3, r3, #27
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	b2da      	uxtb	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540a:	0e1b      	lsrs	r3, r3, #24
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	b2da      	uxtb	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541c:	0d5b      	lsrs	r3, r3, #21
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	b2da      	uxtb	r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542e:	0c9b      	lsrs	r3, r3, #18
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005440:	0bdb      	lsrs	r3, r3, #15
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	b2da      	uxtb	r2, r3
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	7e1b      	ldrb	r3, [r3, #24]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	3302      	adds	r3, #2
 8005464:	2201      	movs	r2, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800546e:	fb02 f203 	mul.w	r2, r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7a1b      	ldrb	r3, [r3, #8]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2201      	movs	r2, #1
 8005482:	409a      	lsls	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005490:	0a52      	lsrs	r2, r2, #9
 8005492:	fb02 f203 	mul.w	r2, r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
 80054a2:	e031      	b.n	8005508 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d11d      	bne.n	80054e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	431a      	orrs	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	029a      	lsls	r2, r3, #10
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60
 80054e6:	e00f      	b.n	8005508 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a58      	ldr	r2, [pc, #352]	; (8005650 <HAL_SD_GetCardCSD+0x344>)
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e09d      	b.n	8005644 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800550c:	0b9b      	lsrs	r3, r3, #14
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	b2da      	uxtb	r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	b2da      	uxtb	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	0fdb      	lsrs	r3, r3, #31
 8005542:	b2da      	uxtb	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	0f5b      	lsrs	r3, r3, #29
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	b2da      	uxtb	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	0e9b      	lsrs	r3, r3, #26
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	b2da      	uxtb	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005570:	0d9b      	lsrs	r3, r3, #22
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	b2da      	uxtb	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	0d5b      	lsrs	r3, r3, #21
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	b2da      	uxtb	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	0bdb      	lsrs	r3, r3, #15
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	0b9b      	lsrs	r3, r3, #14
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	0b5b      	lsrs	r3, r3, #13
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	0b1b      	lsrs	r3, r3, #12
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	0a9b      	lsrs	r3, r3, #10
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	b2da      	uxtb	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	b2da      	uxtb	r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005632:	b2da      	uxtb	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	004005ff 	.word	0x004005ff

08005654 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005654:	b5b0      	push	{r4, r5, r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af04      	add	r7, sp, #16
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2203      	movs	r2, #3
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	2b03      	cmp	r3, #3
 8005672:	d02e      	beq.n	80056d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567a:	d106      	bne.n	800568a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
 8005688:	e029      	b.n	80056de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005690:	d10a      	bne.n	80056a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9d2 	bl	8005a3c <SD_WideBus_Enable>
 8005698:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
 80056a6:	e01a      	b.n	80056de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fa0f 	bl	8005ad2 <SD_WideBus_Disable>
 80056b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
 80056c2:	e00c      	b.n	80056de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
 80056d0:	e005      	b.n	80056de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a26      	ldr	r2, [pc, #152]	; (8005784 <HAL_SD_ConfigWideBusOperation+0x130>)
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056fc:	e01f      	b.n	800573e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681d      	ldr	r5, [r3, #0]
 8005724:	466c      	mov	r4, sp
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800572e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005732:	f107 0308 	add.w	r3, r7, #8
 8005736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005738:	4628      	mov	r0, r5
 800573a:	f001 fb69 	bl	8006e10 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fc2d 	bl	8006fa6 <SDMMC_CmdBlockLength>
 800574c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <HAL_SD_ConfigWideBusOperation+0x130>)
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800577a:	4618      	mov	r0, r3
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	bf00      	nop
 8005784:	004005ff 	.word	0x004005ff

08005788 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	b094      	sub	sp, #80	; 0x50
 800578c:	af04      	add	r7, sp, #16
 800578e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005790:	2301      	movs	r3, #1
 8005792:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fb80 	bl	8006e9e <SDIO_GetPowerState>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80057a8:	e0b6      	b.n	8005918 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d02f      	beq.n	8005812 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 fcff 	bl	80071ba <SDMMC_CmdSendCID>
 80057bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	e0a7      	b.n	8005918 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 fbaa 	bl	8006f28 <SDIO_GetResponse>
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2104      	movs	r1, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 fba1 	bl	8006f28 <SDIO_GetResponse>
 80057e6:	4602      	mov	r2, r0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2108      	movs	r1, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fb98 	bl	8006f28 <SDIO_GetResponse>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	210c      	movs	r1, #12
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fb8f 	bl	8006f28 <SDIO_GetResponse>
 800580a:	4602      	mov	r2, r0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	2b03      	cmp	r3, #3
 8005818:	d00d      	beq.n	8005836 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f107 020e 	add.w	r2, r7, #14
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fd05 	bl	8007234 <SDMMC_CmdSetRelAdd>
 800582a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <SD_InitCard+0xae>
    {
      return errorstate;
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	e070      	b.n	8005918 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	2b03      	cmp	r3, #3
 800583c:	d036      	beq.n	80058ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	461a      	mov	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f001 fccf 	bl	80071f6 <SDMMC_CmdSendCSD>
 8005858:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800585a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	e059      	b.n	8005918 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fb5c 	bl	8006f28 <SDIO_GetResponse>
 8005870:	4602      	mov	r2, r0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2104      	movs	r1, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fb53 	bl	8006f28 <SDIO_GetResponse>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2108      	movs	r1, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fb4a 	bl	8006f28 <SDIO_GetResponse>
 8005894:	4602      	mov	r2, r0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	210c      	movs	r1, #12
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fb41 	bl	8006f28 <SDIO_GetResponse>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2104      	movs	r1, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fb38 	bl	8006f28 <SDIO_GetResponse>
 80058b8:	4603      	mov	r3, r0
 80058ba:	0d1a      	lsrs	r2, r3, #20
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fd20 	bl	800530c <HAL_SD_GetCardCSD>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058d6:	e01f      	b.n	8005918 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	461a      	mov	r2, r3
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	4608      	mov	r0, r1
 80058ea:	f001 fb7e 	bl	8006fea <SDMMC_CmdSelDesel>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <SD_InitCard+0x172>
  {
    return errorstate;
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	e00e      	b.n	8005918 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	466c      	mov	r4, sp
 8005902:	f103 0210 	add.w	r2, r3, #16
 8005906:	ca07      	ldmia	r2, {r0, r1, r2}
 8005908:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800590c:	3304      	adds	r3, #4
 800590e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005910:	4628      	mov	r0, r5
 8005912:	f001 fa7d 	bl	8006e10 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3740      	adds	r7, #64	; 0x40
 800591c:	46bd      	mov	sp, r7
 800591e:	bdb0      	pop	{r4, r5, r7, pc}

08005920 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fb79 	bl	8007030 <SDMMC_CmdGoIdleState>
 800593e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	e072      	b.n	8005a30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fb8c 	bl	800706c <SDMMC_CmdOperCond>
 8005954:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fb62 	bl	8007030 <SDMMC_CmdGoIdleState>
 800596c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	e05b      	b.n	8005a30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	2b01      	cmp	r3, #1
 8005984:	d137      	bne.n	80059f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fb8c 	bl	80070aa <SDMMC_CmdAppCommand>
 8005992:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02d      	beq.n	80059f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800599a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800599e:	e047      	b.n	8005a30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fb7f 	bl	80070aa <SDMMC_CmdAppCommand>
 80059ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	e03b      	b.n	8005a30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	491e      	ldr	r1, [pc, #120]	; (8005a38 <SD_PowerON+0x118>)
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fb95 	bl	80070ee <SDMMC_CmdAppOperCommand>
 80059c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059d0:	e02e      	b.n	8005a30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2100      	movs	r1, #0
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 faa5 	bl	8006f28 <SDIO_GetResponse>
 80059de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	0fdb      	lsrs	r3, r3, #31
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <SD_PowerON+0xcc>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <SD_PowerON+0xce>
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]

    count++;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d802      	bhi.n	8005a06 <SD_PowerON+0xe6>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0cc      	beq.n	80059a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d902      	bls.n	8005a16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a14:	e00c      	b.n	8005a30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
 8005a26:	e002      	b.n	8005a2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	c1100000 	.word	0xc1100000

08005a3c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 fa68 	bl	8006f28 <SDIO_GetResponse>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a62:	d102      	bne.n	8005a6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a68:	e02f      	b.n	8005aca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f879 	bl	8005b68 <SD_FindSCR>
 8005a76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	e023      	b.n	8005aca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01c      	beq.n	8005ac6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f001 fb06 	bl	80070aa <SDMMC_CmdAppCommand>
 8005a9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	e00f      	b.n	8005aca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fb3f 	bl	8007134 <SDMMC_CmdBusWidth>
 8005ab6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	e003      	b.n	8005aca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e001      	b.n	8005aca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fa1d 	bl	8006f28 <SDIO_GetResponse>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af8:	d102      	bne.n	8005b00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005afe:	e02f      	b.n	8005b60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b00:	f107 030c 	add.w	r3, r7, #12
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f82e 	bl	8005b68 <SD_FindSCR>
 8005b0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	e023      	b.n	8005b60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01c      	beq.n	8005b5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f001 fabb 	bl	80070aa <SDMMC_CmdAppCommand>
 8005b34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	e00f      	b.n	8005b60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 faf4 	bl	8007134 <SDMMC_CmdBusWidth>
 8005b4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	e003      	b.n	8005b60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e001      	b.n	8005b60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b08f      	sub	sp, #60	; 0x3c
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b72:	f7fc f857 	bl	8001c24 <HAL_GetTick>
 8005b76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2108      	movs	r1, #8
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fa09 	bl	8006fa6 <SDMMC_CmdBlockLength>
 8005b94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	e0b2      	b.n	8005d06 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f001 fa7c 	bl	80070aa <SDMMC_CmdAppCommand>
 8005bb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <SD_FindSCR+0x56>
  {
    return errorstate;
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	e0a3      	b.n	8005d06 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005bc8:	2330      	movs	r3, #48	; 0x30
 8005bca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f107 0210 	add.w	r2, r7, #16
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f9b3 	bl	8006f4e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fac3 	bl	8007178 <SDMMC_CmdSendSCR>
 8005bf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02a      	beq.n	8005c50 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	e083      	b.n	8005d06 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	f107 0208 	add.w	r2, r7, #8
 8005c18:	18d4      	adds	r4, r2, r3
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	f001 f923 	bl	8006e66 <SDIO_ReadFIFO>
 8005c20:	4603      	mov	r3, r0
 8005c22:	6023      	str	r3, [r4, #0]
      index++;
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	3301      	adds	r3, #1
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2a:	e006      	b.n	8005c3a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c3a:	f7fb fff3 	bl	8001c24 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c48:	d102      	bne.n	8005c50 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005c4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c4e:	e05a      	b.n	8005d06 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0cf      	beq.n	8005bfe <SD_FindSCR+0x96>
 8005c5e:	e000      	b.n	8005c62 <SD_FindSCR+0xfa>
      break;
 8005c60:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2208      	movs	r2, #8
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c78:	2308      	movs	r3, #8
 8005c7a:	e044      	b.n	8005d06 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e037      	b.n	8005d06 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005cac:	2320      	movs	r3, #32
 8005cae:	e02a      	b.n	8005d06 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	061a      	lsls	r2, r3, #24
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cd0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0e1b      	lsrs	r3, r3, #24
 8005cd6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	601a      	str	r2, [r3, #0]
    scr++;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	3304      	adds	r3, #4
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	061a      	lsls	r2, r3, #24
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005cf8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	0e1b      	lsrs	r3, r3, #24
 8005cfe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	373c      	adds	r7, #60	; 0x3c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}

08005d0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e07b      	b.n	8005e18 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d108      	bne.n	8005d3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d30:	d009      	beq.n	8005d46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	61da      	str	r2, [r3, #28]
 8005d38:	e005      	b.n	8005d46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fb fbef 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	ea42 0103 	orr.w	r1, r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	0c1b      	lsrs	r3, r3, #16
 8005de4:	f003 0104 	and.w	r1, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f003 0210 	and.w	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e041      	b.n	8005eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb fbc4 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 fa08 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e041      	b.n	8005f54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f839 	bl	8005f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f000 f9b9 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e0ac      	b.n	80060e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b0c      	cmp	r3, #12
 8005f96:	f200 809f 	bhi.w	80060d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	080060d9 	.word	0x080060d9
 8005fa8:	080060d9 	.word	0x080060d9
 8005fac:	080060d9 	.word	0x080060d9
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	080060d9 	.word	0x080060d9
 8005fb8:	080060d9 	.word	0x080060d9
 8005fbc:	080060d9 	.word	0x080060d9
 8005fc0:	08006057 	.word	0x08006057
 8005fc4:	080060d9 	.word	0x080060d9
 8005fc8:	080060d9 	.word	0x080060d9
 8005fcc:	080060d9 	.word	0x080060d9
 8005fd0:	08006097 	.word	0x08006097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f9ea 	bl	80063b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0208 	orr.w	r2, r2, #8
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0204 	bic.w	r2, r2, #4
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	619a      	str	r2, [r3, #24]
      break;
 8006012:	e062      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fa3a 	bl	8006494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	619a      	str	r2, [r3, #24]
      break;
 8006054:	e041      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fa8f 	bl	8006580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0208 	orr.w	r2, r2, #8
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0204 	bic.w	r2, r2, #4
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	61da      	str	r2, [r3, #28]
      break;
 8006094:	e021      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fae3 	bl	8006668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	61da      	str	r2, [r3, #28]
      break;
 80060d6:	e000      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80060d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_ConfigClockSource+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e0b3      	b.n	800626c <HAL_TIM_ConfigClockSource+0x180>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613c:	d03e      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0xd0>
 800613e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006142:	f200 8087 	bhi.w	8006254 <HAL_TIM_ConfigClockSource+0x168>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	f000 8085 	beq.w	8006258 <HAL_TIM_ConfigClockSource+0x16c>
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006152:	d87f      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 8006154:	2b70      	cmp	r3, #112	; 0x70
 8006156:	d01a      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xa2>
 8006158:	2b70      	cmp	r3, #112	; 0x70
 800615a:	d87b      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 800615c:	2b60      	cmp	r3, #96	; 0x60
 800615e:	d050      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x116>
 8006160:	2b60      	cmp	r3, #96	; 0x60
 8006162:	d877      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 8006164:	2b50      	cmp	r3, #80	; 0x50
 8006166:	d03c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0xf6>
 8006168:	2b50      	cmp	r3, #80	; 0x50
 800616a:	d873      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d058      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x136>
 8006170:	2b40      	cmp	r3, #64	; 0x40
 8006172:	d86f      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d064      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x156>
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d86b      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d060      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x156>
 8006180:	2b20      	cmp	r3, #32
 8006182:	d867      	bhi.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d05c      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x156>
 8006188:	2b10      	cmp	r3, #16
 800618a:	d05a      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800618c:	e062      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6899      	ldr	r1, [r3, #8]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f000 fb33 	bl	8006808 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	609a      	str	r2, [r3, #8]
      break;
 80061ba:	e04e      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6899      	ldr	r1, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f000 fb1c 	bl	8006808 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061de:	609a      	str	r2, [r3, #8]
      break;
 80061e0:	e03b      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 fa90 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2150      	movs	r1, #80	; 0x50
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fae9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8006200:	e02b      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	f000 faaf 	bl	8006772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2160      	movs	r1, #96	; 0x60
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fad9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8006220:	e01b      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	461a      	mov	r2, r3
 8006230:	f000 fa70 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2140      	movs	r1, #64	; 0x40
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fac9 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8006240:	e00b      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f000 fac0 	bl	80067d2 <TIM_ITRx_SetConfig>
        break;
 8006252:	e002      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006258:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d00f      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3d      	ldr	r2, [pc, #244]	; (800638c <TIM_Base_SetConfig+0x118>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2f      	ldr	r2, [pc, #188]	; (8006388 <TIM_Base_SetConfig+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d4:	d027      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	; (800638c <TIM_Base_SetConfig+0x118>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d023      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01f      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a29      	ldr	r2, [pc, #164]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d017      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a28      	ldr	r2, [pc, #160]	; (800639c <TIM_Base_SetConfig+0x128>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <TIM_Base_SetConfig+0x12c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <TIM_Base_SetConfig+0x130>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <TIM_Base_SetConfig+0x134>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <TIM_Base_SetConfig+0x138>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a23      	ldr	r2, [pc, #140]	; (80063b0 <TIM_Base_SetConfig+0x13c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d108      	bne.n	8006338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0c      	ldr	r2, [pc, #48]	; (8006398 <TIM_Base_SetConfig+0x124>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40010400 	.word	0x40010400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800
 80063a8:	40001800 	.word	0x40001800
 80063ac:	40001c00 	.word	0x40001c00
 80063b0:	40002000 	.word	0x40002000

080063b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0302 	bic.w	r3, r3, #2
 80063fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <TIM_OC1_SetConfig+0xd8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC1_SetConfig+0x64>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <TIM_OC1_SetConfig+0xdc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0308 	bic.w	r3, r3, #8
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0304 	bic.w	r3, r3, #4
 8006430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <TIM_OC1_SetConfig+0xd8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC1_SetConfig+0x8e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a14      	ldr	r2, [pc, #80]	; (8006490 <TIM_OC1_SetConfig+0xdc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d111      	bne.n	8006466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0210 	bic.w	r2, r3, #16
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0320 	bic.w	r3, r3, #32
 80064de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a22      	ldr	r2, [pc, #136]	; (8006578 <TIM_OC2_SetConfig+0xe4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_OC2_SetConfig+0x68>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a21      	ldr	r2, [pc, #132]	; (800657c <TIM_OC2_SetConfig+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d10d      	bne.n	8006518 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <TIM_OC2_SetConfig+0xe4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC2_SetConfig+0x94>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	; (800657c <TIM_OC2_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d113      	bne.n	8006550 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800652e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40010400 	.word	0x40010400

08006580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a21      	ldr	r2, [pc, #132]	; (8006660 <TIM_OC3_SetConfig+0xe0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0x66>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a20      	ldr	r2, [pc, #128]	; (8006664 <TIM_OC3_SetConfig+0xe4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10d      	bne.n	8006602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a16      	ldr	r2, [pc, #88]	; (8006660 <TIM_OC3_SetConfig+0xe0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x92>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a15      	ldr	r2, [pc, #84]	; (8006664 <TIM_OC3_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40010000 	.word	0x40010000
 8006664:	40010400 	.word	0x40010400

08006668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	031b      	lsls	r3, r3, #12
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <TIM_OC4_SetConfig+0xa4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC4_SetConfig+0x68>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a11      	ldr	r2, [pc, #68]	; (8006710 <TIM_OC4_SetConfig+0xa8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d109      	bne.n	80066e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	019b      	lsls	r3, r3, #6
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 030a 	bic.w	r3, r3, #10
 8006750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 0210 	bic.w	r2, r3, #16
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	031b      	lsls	r3, r3, #12
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f043 0307 	orr.w	r3, r3, #7
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800685c:	2302      	movs	r3, #2
 800685e:	e05a      	b.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d022      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ac:	d01d      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d018      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a18      	ldr	r2, [pc, #96]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d10c      	bne.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40010400 	.word	0x40010400
 8006938:	40014000 	.word	0x40014000
 800693c:	40001800 	.word	0x40001800

08006940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006958:	2302      	movs	r3, #2
 800695a:	e03d      	b.n	80069d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e03f      	b.n	8006a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa ffec 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f829 	bl	8006a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	b09f      	sub	sp, #124	; 0x7c
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a96:	68d9      	ldr	r1, [r3, #12]
 8006a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	ea40 0301 	orr.w	r3, r0, r1
 8006aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ac4:	f021 010c 	bic.w	r1, r1, #12
 8006ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	6999      	ldr	r1, [r3, #24]
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	ea40 0301 	orr.w	r3, r0, r1
 8006ae8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4bc5      	ldr	r3, [pc, #788]	; (8006e04 <UART_SetConfig+0x384>)
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d004      	beq.n	8006afe <UART_SetConfig+0x7e>
 8006af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4bc3      	ldr	r3, [pc, #780]	; (8006e08 <UART_SetConfig+0x388>)
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d103      	bne.n	8006b06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006afe:	f7fd fe89 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8006b02:	6778      	str	r0, [r7, #116]	; 0x74
 8006b04:	e002      	b.n	8006b0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b06:	f7fd fe71 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8006b0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b14:	f040 80b6 	bne.w	8006c84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	f04f 0500 	mov.w	r5, #0
 8006b20:	4622      	mov	r2, r4
 8006b22:	462b      	mov	r3, r5
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	6439      	str	r1, [r7, #64]	; 0x40
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b30:	1912      	adds	r2, r2, r4
 8006b32:	eb45 0303 	adc.w	r3, r5, r3
 8006b36:	f04f 0000 	mov.w	r0, #0
 8006b3a:	f04f 0100 	mov.w	r1, #0
 8006b3e:	00d9      	lsls	r1, r3, #3
 8006b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b44:	00d0      	lsls	r0, r2, #3
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	1911      	adds	r1, r2, r4
 8006b4c:	6639      	str	r1, [r7, #96]	; 0x60
 8006b4e:	416b      	adcs	r3, r5
 8006b50:	667b      	str	r3, [r7, #100]	; 0x64
 8006b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b60:	415b      	adcs	r3, r3
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b6c:	f7f9 fb3e 	bl	80001ec <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4ba5      	ldr	r3, [pc, #660]	; (8006e0c <UART_SetConfig+0x38c>)
 8006b76:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	011e      	lsls	r6, r3, #4
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b80:	461c      	mov	r4, r3
 8006b82:	f04f 0500 	mov.w	r5, #0
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b96:	1912      	adds	r2, r2, r4
 8006b98:	eb45 0303 	adc.w	r3, r5, r3
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	00d9      	lsls	r1, r3, #3
 8006ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006baa:	00d0      	lsls	r0, r2, #3
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	1911      	adds	r1, r2, r4
 8006bb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bb4:	416b      	adcs	r3, r5
 8006bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	1891      	adds	r1, r2, r2
 8006bc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bc6:	415b      	adcs	r3, r3
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bd2:	f7f9 fb0b 	bl	80001ec <__aeabi_uldivmod>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4b8c      	ldr	r3, [pc, #560]	; (8006e0c <UART_SetConfig+0x38c>)
 8006bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	2164      	movs	r1, #100	; 0x64
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	3332      	adds	r3, #50	; 0x32
 8006bee:	4a87      	ldr	r2, [pc, #540]	; (8006e0c <UART_SetConfig+0x38c>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bfc:	441e      	add	r6, r3
 8006bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c00:	4618      	mov	r0, r3
 8006c02:	f04f 0100 	mov.w	r1, #0
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	1894      	adds	r4, r2, r2
 8006c0c:	623c      	str	r4, [r7, #32]
 8006c0e:	415b      	adcs	r3, r3
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
 8006c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c16:	1812      	adds	r2, r2, r0
 8006c18:	eb41 0303 	adc.w	r3, r1, r3
 8006c1c:	f04f 0400 	mov.w	r4, #0
 8006c20:	f04f 0500 	mov.w	r5, #0
 8006c24:	00dd      	lsls	r5, r3, #3
 8006c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c2a:	00d4      	lsls	r4, r2, #3
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	1814      	adds	r4, r2, r0
 8006c32:	653c      	str	r4, [r7, #80]	; 0x50
 8006c34:	414b      	adcs	r3, r1
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	1891      	adds	r1, r2, r2
 8006c44:	61b9      	str	r1, [r7, #24]
 8006c46:	415b      	adcs	r3, r3
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c52:	f7f9 facb 	bl	80001ec <__aeabi_uldivmod>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4b6c      	ldr	r3, [pc, #432]	; (8006e0c <UART_SetConfig+0x38c>)
 8006c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	2164      	movs	r1, #100	; 0x64
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	3332      	adds	r3, #50	; 0x32
 8006c6e:	4a67      	ldr	r2, [pc, #412]	; (8006e0c <UART_SetConfig+0x38c>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 0207 	and.w	r2, r3, #7
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4432      	add	r2, r6
 8006c80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c82:	e0b9      	b.n	8006df8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c86:	461c      	mov	r4, r3
 8006c88:	f04f 0500 	mov.w	r5, #0
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	462b      	mov	r3, r5
 8006c90:	1891      	adds	r1, r2, r2
 8006c92:	6139      	str	r1, [r7, #16]
 8006c94:	415b      	adcs	r3, r3
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c9c:	1912      	adds	r2, r2, r4
 8006c9e:	eb45 0303 	adc.w	r3, r5, r3
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	00d9      	lsls	r1, r3, #3
 8006cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cb0:	00d0      	lsls	r0, r2, #3
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	eb12 0804 	adds.w	r8, r2, r4
 8006cba:	eb43 0905 	adc.w	r9, r3, r5
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	008b      	lsls	r3, r1, #2
 8006cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cd6:	0082      	lsls	r2, r0, #2
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fa86 	bl	80001ec <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4b49      	ldr	r3, [pc, #292]	; (8006e0c <UART_SetConfig+0x38c>)
 8006ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	011e      	lsls	r6, r3, #4
 8006cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f04f 0100 	mov.w	r1, #0
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	1894      	adds	r4, r2, r2
 8006cfc:	60bc      	str	r4, [r7, #8]
 8006cfe:	415b      	adcs	r3, r3
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d06:	1812      	adds	r2, r2, r0
 8006d08:	eb41 0303 	adc.w	r3, r1, r3
 8006d0c:	f04f 0400 	mov.w	r4, #0
 8006d10:	f04f 0500 	mov.w	r5, #0
 8006d14:	00dd      	lsls	r5, r3, #3
 8006d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d1a:	00d4      	lsls	r4, r2, #3
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	462b      	mov	r3, r5
 8006d20:	1814      	adds	r4, r2, r0
 8006d22:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d24:	414b      	adcs	r3, r1
 8006d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f04f 0100 	mov.w	r1, #0
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	008b      	lsls	r3, r1, #2
 8006d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d40:	0082      	lsls	r2, r0, #2
 8006d42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d46:	f7f9 fa51 	bl	80001ec <__aeabi_uldivmod>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4b2f      	ldr	r3, [pc, #188]	; (8006e0c <UART_SetConfig+0x38c>)
 8006d50:	fba3 1302 	umull	r1, r3, r3, r2
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	2164      	movs	r1, #100	; 0x64
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	3332      	adds	r3, #50	; 0x32
 8006d62:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <UART_SetConfig+0x38c>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d6e:	441e      	add	r6, r3
 8006d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d72:	4618      	mov	r0, r3
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	1894      	adds	r4, r2, r2
 8006d7e:	603c      	str	r4, [r7, #0]
 8006d80:	415b      	adcs	r3, r3
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d88:	1812      	adds	r2, r2, r0
 8006d8a:	eb41 0303 	adc.w	r3, r1, r3
 8006d8e:	f04f 0400 	mov.w	r4, #0
 8006d92:	f04f 0500 	mov.w	r5, #0
 8006d96:	00dd      	lsls	r5, r3, #3
 8006d98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d9c:	00d4      	lsls	r4, r2, #3
 8006d9e:	4622      	mov	r2, r4
 8006da0:	462b      	mov	r3, r5
 8006da2:	eb12 0a00 	adds.w	sl, r2, r0
 8006da6:	eb43 0b01 	adc.w	fp, r3, r1
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f04f 0100 	mov.w	r1, #0
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	008b      	lsls	r3, r1, #2
 8006dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dc2:	0082      	lsls	r2, r0, #2
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	4659      	mov	r1, fp
 8006dc8:	f7f9 fa10 	bl	80001ec <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <UART_SetConfig+0x38c>)
 8006dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2164      	movs	r1, #100	; 0x64
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	3332      	adds	r3, #50	; 0x32
 8006de4:	4a09      	ldr	r2, [pc, #36]	; (8006e0c <UART_SetConfig+0x38c>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4432      	add	r2, r6
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	377c      	adds	r7, #124	; 0x7c
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	bf00      	nop
 8006e04:	40011000 	.word	0x40011000
 8006e08:	40011400 	.word	0x40011400
 8006e0c:	51eb851f 	.word	0x51eb851f

08006e10 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006e10:	b084      	sub	sp, #16
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	f107 001c 	add.w	r0, r7, #28
 8006e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006e26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006e28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006e2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006e2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006e32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006e36:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006e3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006e4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	b004      	add	sp, #16
 8006e64:	4770      	bx	lr

08006e66 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006e8e:	2002      	movs	r0, #2
 8006e90:	f7fa fed4 	bl	8001c3c <HAL_Delay>
  
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ed8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006ede:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ee4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ef4:	f023 030f 	bic.w	r3, r3, #15
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	b2db      	uxtb	r3, r3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3314      	adds	r3, #20
 8006f36:	461a      	mov	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
}  
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f74:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006f7a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006f80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0

}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b088      	sub	sp, #32
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fc6:	f107 0308 	add.w	r3, r7, #8
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ff74 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd6:	2110      	movs	r1, #16
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f979 	bl	80072d0 <SDMMC_GetCmdResp1>
 8006fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08a      	sub	sp, #40	; 0x28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006ffa:	2307      	movs	r3, #7
 8006ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800700a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	4619      	mov	r1, r3
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff ff51 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007018:	f241 3288 	movw	r2, #5000	; 0x1388
 800701c:	2107      	movs	r1, #7
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f956 	bl	80072d0 <SDMMC_GetCmdResp1>
 8007024:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ff30 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f90c 	bl	8007278 <SDMMC_GetCmdError>
 8007060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007062:	69fb      	ldr	r3, [r7, #28]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007074:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800707a:	2308      	movs	r3, #8
 800707c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800708c:	f107 0308 	add.w	r3, r7, #8
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff ff11 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb03 	bl	80076a4 <SDMMC_GetCmdResp7>
 800709e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070a0:	69fb      	ldr	r3, [r7, #28]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80070b8:	2337      	movs	r3, #55	; 0x37
 80070ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070ca:	f107 0308 	add.w	r3, r7, #8
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fef2 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80070d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070da:	2137      	movs	r1, #55	; 0x37
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8f7 	bl	80072d0 <SDMMC_GetCmdResp1>
 80070e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070e4:	69fb      	ldr	r3, [r7, #28]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3720      	adds	r7, #32
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b088      	sub	sp, #32
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007104:	2329      	movs	r3, #41	; 0x29
 8007106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007108:	2340      	movs	r3, #64	; 0x40
 800710a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007114:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007116:	f107 0308 	add.w	r3, r7, #8
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fecc 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa0a 	bl	800753c <SDMMC_GetCmdResp3>
 8007128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800712a:	69fb      	ldr	r3, [r7, #28]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007142:	2306      	movs	r3, #6
 8007144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007146:	2340      	movs	r3, #64	; 0x40
 8007148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800714e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007154:	f107 0308 	add.w	r3, r7, #8
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fead 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007160:	f241 3288 	movw	r2, #5000	; 0x1388
 8007164:	2106      	movs	r1, #6
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f8b2 	bl	80072d0 <SDMMC_GetCmdResp1>
 800716c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800716e:	69fb      	ldr	r3, [r7, #28]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3720      	adds	r7, #32
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007184:	2333      	movs	r3, #51	; 0x33
 8007186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007194:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fe8c 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80071a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a6:	2133      	movs	r1, #51	; 0x33
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f891 	bl	80072d0 <SDMMC_GetCmdResp1>
 80071ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071b0:	69fb      	ldr	r3, [r7, #28]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b088      	sub	sp, #32
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80071c6:	2302      	movs	r3, #2
 80071c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80071ca:	23c0      	movs	r3, #192	; 0xc0
 80071cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d8:	f107 0308 	add.w	r3, r7, #8
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fe6b 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f961 	bl	80074ac <SDMMC_GetCmdResp2>
 80071ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ec:	69fb      	ldr	r3, [r7, #28]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007204:	2309      	movs	r3, #9
 8007206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007208:	23c0      	movs	r3, #192	; 0xc0
 800720a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fe4c 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f942 	bl	80074ac <SDMMC_GetCmdResp2>
 8007228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007242:	2303      	movs	r3, #3
 8007244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007246:	2340      	movs	r3, #64	; 0x40
 8007248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800724e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007254:	f107 0308 	add.w	r3, r7, #8
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fe2d 	bl	8006eba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	2103      	movs	r1, #3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9a7 	bl	80075b8 <SDMMC_GetCmdResp6>
 800726a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800726c:	69fb      	ldr	r3, [r7, #28]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <SDMMC_GetCmdError+0x50>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <SDMMC_GetCmdError+0x54>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	0a5b      	lsrs	r3, r3, #9
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	fb02 f303 	mul.w	r3, r2, r3
 8007294:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1e5a      	subs	r2, r3, #1
 800729a:	60fa      	str	r2, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072a4:	e009      	b.n	80072ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f1      	beq.n	8007296 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22c5      	movs	r2, #197	; 0xc5
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000000 	.word	0x20000000
 80072cc:	10624dd3 	.word	0x10624dd3

080072d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	460b      	mov	r3, r1
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072de:	4b70      	ldr	r3, [pc, #448]	; (80074a0 <SDMMC_GetCmdResp1+0x1d0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a70      	ldr	r2, [pc, #448]	; (80074a4 <SDMMC_GetCmdResp1+0x1d4>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	0a5a      	lsrs	r2, r3, #9
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	61fa      	str	r2, [r7, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007300:	e0c9      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0ef      	beq.n	80072f2 <SDMMC_GetCmdResp1+0x22>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1ea      	bne.n	80072f2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2204      	movs	r2, #4
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800732e:	2304      	movs	r3, #4
 8007330:	e0b1      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007344:	2301      	movs	r3, #1
 8007346:	e0a6      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	22c5      	movs	r2, #197	; 0xc5
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fddd 	bl	8006f0e <SDIO_GetCommandResponse>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	4293      	cmp	r3, r2
 800735c:	d001      	beq.n	8007362 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800735e:	2301      	movs	r3, #1
 8007360:	e099      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007362:	2100      	movs	r1, #0
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff fddf 	bl	8006f28 <SDIO_GetResponse>
 800736a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4b4e      	ldr	r3, [pc, #312]	; (80074a8 <SDMMC_GetCmdResp1+0x1d8>)
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007376:	2300      	movs	r3, #0
 8007378:	e08d      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	da02      	bge.n	8007386 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007384:	e087      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	e080      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800739e:	2380      	movs	r3, #128	; 0x80
 80073a0:	e079      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80073ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b0:	e071      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80073bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c0:	e069      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80073cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d0:	e061      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80073dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073e0:	e059      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f0:	e051      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007400:	e049      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800740c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007410:	e041      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800741c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007420:	e039      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800742c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007430:	e031      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800743c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007440:	e029      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800744c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007450:	e021      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800745c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007460:	e019      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800746c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007470:	e011      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800747c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007480:	e009      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800748c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007490:	e001      	b.n	8007496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000000 	.word	0x20000000
 80074a4:	10624dd3 	.word	0x10624dd3
 80074a8:	fdffe008 	.word	0xfdffe008

080074ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074b4:	4b1f      	ldr	r3, [pc, #124]	; (8007534 <SDMMC_GetCmdResp2+0x88>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1f      	ldr	r2, [pc, #124]	; (8007538 <SDMMC_GetCmdResp2+0x8c>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0a5b      	lsrs	r3, r3, #9
 80074c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c4:	fb02 f303 	mul.w	r3, r2, r3
 80074c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1e5a      	subs	r2, r3, #1
 80074ce:	60fa      	str	r2, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074d8:	e026      	b.n	8007528 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0ef      	beq.n	80074ca <SDMMC_GetCmdResp2+0x1e>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ea      	bne.n	80074ca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2204      	movs	r2, #4
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007506:	2304      	movs	r3, #4
 8007508:	e00e      	b.n	8007528 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800751c:	2301      	movs	r3, #1
 800751e:	e003      	b.n	8007528 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	22c5      	movs	r2, #197	; 0xc5
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20000000 	.word	0x20000000
 8007538:	10624dd3 	.word	0x10624dd3

0800753c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <SDMMC_GetCmdResp3+0x74>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <SDMMC_GetCmdResp3+0x78>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	0a5b      	lsrs	r3, r3, #9
 8007550:	f241 3288 	movw	r2, #5000	; 0x1388
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1e5a      	subs	r2, r3, #1
 800755e:	60fa      	str	r2, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007568:	e01b      	b.n	80075a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0ef      	beq.n	800755a <SDMMC_GetCmdResp3+0x1e>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ea      	bne.n	800755a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007596:	2304      	movs	r3, #4
 8007598:	e003      	b.n	80075a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	22c5      	movs	r2, #197	; 0xc5
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000000 	.word	0x20000000
 80075b4:	10624dd3 	.word	0x10624dd3

080075b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	460b      	mov	r3, r1
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075c6:	4b35      	ldr	r3, [pc, #212]	; (800769c <SDMMC_GetCmdResp6+0xe4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a35      	ldr	r2, [pc, #212]	; (80076a0 <SDMMC_GetCmdResp6+0xe8>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	0a5b      	lsrs	r3, r3, #9
 80075d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	1e5a      	subs	r2, r3, #1
 80075e0:	61fa      	str	r2, [r7, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075ea:	e052      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0ef      	beq.n	80075dc <SDMMC_GetCmdResp6+0x24>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1ea      	bne.n	80075dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2204      	movs	r2, #4
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007618:	2304      	movs	r3, #4
 800761a:	e03a      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800762e:	2301      	movs	r3, #1
 8007630:	e02f      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fc6b 	bl	8006f0e <SDIO_GetCommandResponse>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	4293      	cmp	r3, r2
 8007640:	d001      	beq.n	8007646 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007642:	2301      	movs	r3, #1
 8007644:	e025      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	22c5      	movs	r2, #197	; 0xc5
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f7ff fc6a 	bl	8006f28 <SDIO_GetResponse>
 8007654:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800766a:	2300      	movs	r3, #0
 800766c:	e011      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800767c:	e009      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800768c:	e001      	b.n	8007692 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800768e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000000 	.word	0x20000000
 80076a0:	10624dd3 	.word	0x10624dd3

080076a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076ac:	4b22      	ldr	r3, [pc, #136]	; (8007738 <SDMMC_GetCmdResp7+0x94>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <SDMMC_GetCmdResp7+0x98>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	0a5b      	lsrs	r3, r3, #9
 80076b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	60fa      	str	r2, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076d0:	e02c      	b.n	800772c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0ef      	beq.n	80076c2 <SDMMC_GetCmdResp7+0x1e>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ea      	bne.n	80076c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2204      	movs	r2, #4
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076fe:	2304      	movs	r3, #4
 8007700:	e014      	b.n	800772c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007714:	2301      	movs	r3, #1
 8007716:	e009      	b.n	800772c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800772a:	2300      	movs	r3, #0
  
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20000000 	.word	0x20000000
 800773c:	10624dd3 	.word	0x10624dd3

08007740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007740:	b084      	sub	sp, #16
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	f107 001c 	add.w	r0, r7, #28
 800774e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2b01      	cmp	r3, #1
 8007756:	d122      	bne.n	800779e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800776c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fac6 	bl	8008d24 <USB_CoreReset>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
 800779c:	e01a      	b.n	80077d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 faba 	bl	8008d24 <USB_CoreReset>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
 80077c6:	e005      	b.n	80077d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d10b      	bne.n	80077f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f043 0206 	orr.w	r2, r3, #6
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077fe:	b004      	add	sp, #16
 8007800:	4770      	bx	lr
	...

08007804 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d165      	bne.n	80078e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a41      	ldr	r2, [pc, #260]	; (8007920 <USB_SetTurnaroundTime+0x11c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d906      	bls.n	800782e <USB_SetTurnaroundTime+0x2a>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a40      	ldr	r2, [pc, #256]	; (8007924 <USB_SetTurnaroundTime+0x120>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d202      	bcs.n	800782e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007828:	230f      	movs	r3, #15
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	e062      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <USB_SetTurnaroundTime+0x120>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d306      	bcc.n	8007844 <USB_SetTurnaroundTime+0x40>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <USB_SetTurnaroundTime+0x124>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d202      	bcs.n	8007844 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800783e:	230e      	movs	r3, #14
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e057      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4a38      	ldr	r2, [pc, #224]	; (8007928 <USB_SetTurnaroundTime+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d306      	bcc.n	800785a <USB_SetTurnaroundTime+0x56>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4a37      	ldr	r2, [pc, #220]	; (800792c <USB_SetTurnaroundTime+0x128>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d202      	bcs.n	800785a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007854:	230d      	movs	r3, #13
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e04c      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4a33      	ldr	r2, [pc, #204]	; (800792c <USB_SetTurnaroundTime+0x128>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d306      	bcc.n	8007870 <USB_SetTurnaroundTime+0x6c>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4a32      	ldr	r2, [pc, #200]	; (8007930 <USB_SetTurnaroundTime+0x12c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d802      	bhi.n	8007870 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800786a:	230c      	movs	r3, #12
 800786c:	617b      	str	r3, [r7, #20]
 800786e:	e041      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <USB_SetTurnaroundTime+0x12c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d906      	bls.n	8007886 <USB_SetTurnaroundTime+0x82>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4a2e      	ldr	r2, [pc, #184]	; (8007934 <USB_SetTurnaroundTime+0x130>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d802      	bhi.n	8007886 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007880:	230b      	movs	r3, #11
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	e036      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <USB_SetTurnaroundTime+0x130>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d906      	bls.n	800789c <USB_SetTurnaroundTime+0x98>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4a29      	ldr	r2, [pc, #164]	; (8007938 <USB_SetTurnaroundTime+0x134>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d802      	bhi.n	800789c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007896:	230a      	movs	r3, #10
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	e02b      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a26      	ldr	r2, [pc, #152]	; (8007938 <USB_SetTurnaroundTime+0x134>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d906      	bls.n	80078b2 <USB_SetTurnaroundTime+0xae>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a25      	ldr	r2, [pc, #148]	; (800793c <USB_SetTurnaroundTime+0x138>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d202      	bcs.n	80078b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078ac:	2309      	movs	r3, #9
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e020      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4a21      	ldr	r2, [pc, #132]	; (800793c <USB_SetTurnaroundTime+0x138>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d306      	bcc.n	80078c8 <USB_SetTurnaroundTime+0xc4>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4a20      	ldr	r2, [pc, #128]	; (8007940 <USB_SetTurnaroundTime+0x13c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d802      	bhi.n	80078c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078c2:	2308      	movs	r3, #8
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e015      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4a1d      	ldr	r2, [pc, #116]	; (8007940 <USB_SetTurnaroundTime+0x13c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d906      	bls.n	80078de <USB_SetTurnaroundTime+0xda>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4a1c      	ldr	r2, [pc, #112]	; (8007944 <USB_SetTurnaroundTime+0x140>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d202      	bcs.n	80078de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078d8:	2307      	movs	r3, #7
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e00a      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078de:	2306      	movs	r3, #6
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e007      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078ea:	2309      	movs	r3, #9
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e001      	b.n	80078f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078f0:	2309      	movs	r3, #9
 80078f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	029b      	lsls	r3, r3, #10
 8007908:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800790c:	431a      	orrs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	00d8acbf 	.word	0x00d8acbf
 8007924:	00e4e1c0 	.word	0x00e4e1c0
 8007928:	00f42400 	.word	0x00f42400
 800792c:	01067380 	.word	0x01067380
 8007930:	011a499f 	.word	0x011a499f
 8007934:	01312cff 	.word	0x01312cff
 8007938:	014ca43f 	.word	0x014ca43f
 800793c:	016e3600 	.word	0x016e3600
 8007940:	01a6ab1f 	.word	0x01a6ab1f
 8007944:	01e84800 	.word	0x01e84800

08007948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f043 0201 	orr.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d106      	bne.n	80079b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]
 80079b6:	e00b      	b.n	80079d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e001      	b.n	80079d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e003      	b.n	80079d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80079d0:	2032      	movs	r0, #50	; 0x32
 80079d2:	f7fa f933 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e0:	b084      	sub	sp, #16
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	e009      	b.n	8007a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3340      	adds	r3, #64	; 0x40
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b0e      	cmp	r3, #14
 8007a18:	d9f2      	bls.n	8007a00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11c      	bne.n	8007a5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a2e:	f043 0302 	orr.w	r3, r3, #2
 8007a32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
 8007a58:	e00b      	b.n	8007a72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a84:	4619      	mov	r1, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	680b      	ldr	r3, [r1, #0]
 8007a90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d10c      	bne.n	8007ab2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f949 	bl	8007d38 <USB_SetDevSpeed>
 8007aa6:	e008      	b.n	8007aba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f944 	bl	8007d38 <USB_SetDevSpeed>
 8007ab0:	e003      	b.n	8007aba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ab2:	2103      	movs	r1, #3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f93f 	bl	8007d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aba:	2110      	movs	r1, #16
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8f3 	bl	8007ca8 <USB_FlushTxFifo>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f911 	bl	8007cf4 <USB_FlushRxFifo>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	461a      	mov	r2, r3
 8007afc:	2300      	movs	r3, #0
 8007afe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	e043      	b.n	8007b8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b1c:	d118      	bne.n	8007b50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	461a      	mov	r2, r3
 8007b32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	e013      	b.n	8007b62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	461a      	mov	r2, r3
 8007b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e008      	b.n	8007b62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	461a      	mov	r2, r3
 8007b70:	2300      	movs	r3, #0
 8007b72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	461a      	mov	r2, r3
 8007b82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d3b7      	bcc.n	8007b06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	e043      	b.n	8007c24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb2:	d118      	bne.n	8007be6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	e013      	b.n	8007bf8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	e008      	b.n	8007bf8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	461a      	mov	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c16:	461a      	mov	r2, r3
 8007c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	3301      	adds	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d3b7      	bcc.n	8007b9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f043 0210 	orr.w	r2, r3, #16
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <USB_DevInit+0x2c4>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f043 0208 	orr.w	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d107      	bne.n	8007c94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c8c:	f043 0304 	orr.w	r3, r3, #4
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ca0:	b004      	add	sp, #16
 8007ca2:	4770      	bx	lr
 8007ca4:	803c3800 	.word	0x803c3800

08007ca8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	019b      	lsls	r3, r3, #6
 8007cba:	f043 0220 	orr.w	r2, r3, #32
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <USB_FlushTxFifo+0x48>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e006      	b.n	8007ce2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d0f0      	beq.n	8007cc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	00030d40 	.word	0x00030d40

08007cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2210      	movs	r2, #16
 8007d04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <USB_FlushRxFifo+0x40>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e006      	b.n	8007d26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d0f0      	beq.n	8007d06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	00030d40 	.word	0x00030d40

08007d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0306 	and.w	r3, r3, #6
 8007d82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]
 8007d8e:	e00a      	b.n	8007da6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d002      	beq.n	8007d9c <USB_GetDevSpeed+0x32>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	d102      	bne.n	8007da2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	75fb      	strb	r3, [r7, #23]
 8007da0:	e001      	b.n	8007da6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007da2:	230f      	movs	r3, #15
 8007da4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d13a      	bne.n	8007e46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	2101      	movs	r1, #1
 8007de2:	fa01 f303 	lsl.w	r3, r1, r3
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d155      	bne.n	8007eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	78db      	ldrb	r3, [r3, #3]
 8007e22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	059b      	lsls	r3, r3, #22
 8007e2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	e036      	b.n	8007eb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	69da      	ldr	r2, [r3, #28]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	2101      	movs	r1, #1
 8007e58:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	68f9      	ldr	r1, [r7, #12]
 8007e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e64:	4313      	orrs	r3, r2
 8007e66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d11a      	bne.n	8007eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	78db      	ldrb	r3, [r3, #3]
 8007e98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d161      	bne.n	8007fa4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef6:	d11f      	bne.n	8007f38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	2101      	movs	r1, #1
 8007f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	43db      	mvns	r3, r3
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f58:	4013      	ands	r3, r2
 8007f5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	43db      	mvns	r3, r3
 8007f76:	68f9      	ldr	r1, [r7, #12]
 8007f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	0159      	lsls	r1, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	440b      	add	r3, r1
 8007f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4b35      	ldr	r3, [pc, #212]	; (8008074 <USB_DeactivateEndpoint+0x1b0>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]
 8007fa2:	e060      	b.n	8008066 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fba:	d11f      	bne.n	8007ffc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	2101      	movs	r1, #1
 800800e:	fa01 f303 	lsl.w	r3, r1, r3
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	43db      	mvns	r3, r3
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800801c:	4013      	ands	r3, r2
 800801e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	2101      	movs	r1, #1
 8008032:	fa01 f303 	lsl.w	r3, r1, r3
 8008036:	041b      	lsls	r3, r3, #16
 8008038:	43db      	mvns	r3, r3
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008040:	4013      	ands	r3, r2
 8008042:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	0159      	lsls	r1, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	440b      	add	r3, r1
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	4619      	mov	r1, r3
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <USB_DeactivateEndpoint+0x1b4>)
 8008062:	4013      	ands	r3, r2
 8008064:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	ec337800 	.word	0xec337800
 8008078:	eff37800 	.word	0xeff37800

0800807c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b01      	cmp	r3, #1
 800809a:	f040 815c 	bne.w	8008356 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d132      	bne.n	800810c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008104:	0cdb      	lsrs	r3, r3, #19
 8008106:	04db      	lsls	r3, r3, #19
 8008108:	6113      	str	r3, [r2, #16]
 800810a:	e074      	b.n	80081f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008126:	0cdb      	lsrs	r3, r3, #19
 8008128:	04db      	lsls	r3, r3, #19
 800812a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800814a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800814e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6959      	ldr	r1, [r3, #20]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	440b      	add	r3, r1
 8008168:	1e59      	subs	r1, r3, #1
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008172:	04d9      	lsls	r1, r3, #19
 8008174:	4b9d      	ldr	r3, [pc, #628]	; (80083ec <USB_EPStartXfer+0x370>)
 8008176:	400b      	ands	r3, r1
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	0148      	lsls	r0, r1, #5
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	4401      	add	r1, r0
 8008180:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008184:	4313      	orrs	r3, r2
 8008186:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	0148      	lsls	r0, r1, #5
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	4401      	add	r1, r0
 80081a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	78db      	ldrb	r3, [r3, #3]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d11f      	bne.n	80081f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80081d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	0151      	lsls	r1, r2, #5
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	440a      	add	r2, r1
 80081ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d14b      	bne.n	8008294 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d009      	beq.n	8008218 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	461a      	mov	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	78db      	ldrb	r3, [r3, #3]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d128      	bne.n	8008272 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d110      	bne.n	8008252 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e00f      	b.n	8008272 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008270:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	e12f      	b.n	80084f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d015      	beq.n	80082e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8117 	beq.w	80084f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	2101      	movs	r1, #1
 80082d8:	fa01 f303 	lsl.w	r3, r1, r3
 80082dc:	69f9      	ldr	r1, [r7, #28]
 80082de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082e2:	4313      	orrs	r3, r2
 80082e4:	634b      	str	r3, [r1, #52]	; 0x34
 80082e6:	e105      	b.n	80084f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d110      	bne.n	800831a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	e00f      	b.n	800833a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	440a      	add	r2, r1
 8008330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008338:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	68d9      	ldr	r1, [r3, #12]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	781a      	ldrb	r2, [r3, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	b298      	uxth	r0, r3
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4603      	mov	r3, r0
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa2b 	bl	80087aa <USB_WritePacket>
 8008354:	e0ce      	b.n	80084f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008370:	0cdb      	lsrs	r3, r3, #19
 8008372:	04db      	lsls	r3, r3, #19
 8008374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008398:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d126      	bne.n	80083f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b8:	69b9      	ldr	r1, [r7, #24]
 80083ba:	0148      	lsls	r0, r1, #5
 80083bc:	69f9      	ldr	r1, [r7, #28]
 80083be:	4401      	add	r1, r0
 80083c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083c4:	4313      	orrs	r3, r2
 80083c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083e6:	6113      	str	r3, [r2, #16]
 80083e8:	e036      	b.n	8008458 <USB_EPStartXfer+0x3dc>
 80083ea:	bf00      	nop
 80083ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	695a      	ldr	r2, [r3, #20]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	1e5a      	subs	r2, r3, #1
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	04d9      	lsls	r1, r3, #19
 8008418:	4b39      	ldr	r3, [pc, #228]	; (8008500 <USB_EPStartXfer+0x484>)
 800841a:	400b      	ands	r3, r1
 800841c:	69b9      	ldr	r1, [r7, #24]
 800841e:	0148      	lsls	r0, r1, #5
 8008420:	69f9      	ldr	r1, [r7, #28]
 8008422:	4401      	add	r1, r0
 8008424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008428:	4313      	orrs	r3, r2
 800842a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	8af9      	ldrh	r1, [r7, #22]
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	0148      	lsls	r0, r1, #5
 800844c:	69f9      	ldr	r1, [r7, #28]
 800844e:	4401      	add	r1, r0
 8008450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008454:	4313      	orrs	r3, r2
 8008456:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d10d      	bne.n	800847a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68d9      	ldr	r1, [r3, #12]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	460a      	mov	r2, r1
 8008478:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	78db      	ldrb	r3, [r3, #3]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d128      	bne.n	80084d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848e:	2b00      	cmp	r3, #0
 8008490:	d110      	bne.n	80084b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e00f      	b.n	80084d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	1ff80000 	.word	0x1ff80000

08008504 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b01      	cmp	r3, #1
 8008522:	f040 80cd 	bne.w	80086c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d132      	bne.n	8008594 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800854c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	440a      	add	r2, r1
 8008568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858c:	0cdb      	lsrs	r3, r3, #19
 800858e:	04db      	lsls	r3, r3, #19
 8008590:	6113      	str	r3, [r2, #16]
 8008592:	e04e      	b.n	8008632 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ae:	0cdb      	lsrs	r3, r3, #19
 80085b0:	04db      	lsls	r3, r3, #19
 80085b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	695a      	ldr	r2, [r3, #20]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800860a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008622:	6939      	ldr	r1, [r7, #16]
 8008624:	0148      	lsls	r0, r1, #5
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	4401      	add	r1, r0
 800862a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d11e      	bne.n	8008676 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d009      	beq.n	8008654 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864c:	461a      	mov	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	e092      	b.n	800879c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008690:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008694:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d07e      	beq.n	800879c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	2101      	movs	r1, #1
 80086b0:	fa01 f303 	lsl.w	r3, r1, r3
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086ba:	4313      	orrs	r3, r2
 80086bc:	634b      	str	r3, [r1, #52]	; 0x34
 80086be:	e06d      	b.n	800879c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086da:	0cdb      	lsrs	r3, r3, #19
 80086dc:	04db      	lsls	r3, r3, #19
 80086de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008702:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008732:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874a:	6939      	ldr	r1, [r7, #16]
 800874c:	0148      	lsls	r0, r1, #5
 800874e:	6979      	ldr	r1, [r7, #20]
 8008750:	4401      	add	r1, r0
 8008752:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008756:	4313      	orrs	r3, r2
 8008758:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10d      	bne.n	800877c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	68d9      	ldr	r1, [r3, #12]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	460a      	mov	r2, r1
 800877a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800879a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b089      	sub	sp, #36	; 0x24
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4611      	mov	r1, r2
 80087b6:	461a      	mov	r2, r3
 80087b8:	460b      	mov	r3, r1
 80087ba:	71fb      	strb	r3, [r7, #7]
 80087bc:	4613      	mov	r3, r2
 80087be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80087c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11a      	bne.n	8008806 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087d0:	88bb      	ldrh	r3, [r7, #4]
 80087d2:	3303      	adds	r3, #3
 80087d4:	089b      	lsrs	r3, r3, #2
 80087d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e00f      	b.n	80087fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	031a      	lsls	r2, r3, #12
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ea:	461a      	mov	r2, r3
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	3304      	adds	r3, #4
 80087f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	429a      	cmp	r2, r3
 8008804:	d3eb      	bcc.n	80087de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3724      	adds	r7, #36	; 0x24
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	3303      	adds	r3, #3
 800882e:	089b      	lsrs	r3, r3, #2
 8008830:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008832:	2300      	movs	r3, #0
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	e00b      	b.n	8008850 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	601a      	str	r2, [r3, #0]
    pDest++;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	3304      	adds	r3, #4
 8008848:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	3301      	adds	r3, #1
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	429a      	cmp	r2, r3
 8008856:	d3ef      	bcc.n	8008838 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008858:	69fb      	ldr	r3, [r7, #28]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3724      	adds	r7, #36	; 0x24
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d12c      	bne.n	80088dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	db12      	blt.n	80088ba <USB_EPSetStall+0x54>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e02b      	b.n	8008934 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	db12      	blt.n	8008914 <USB_EPSetStall+0xae>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00f      	beq.n	8008914 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008912:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d128      	bne.n	80089b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800897c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	2b03      	cmp	r3, #3
 8008984:	d003      	beq.n	800898e <USB_EPClearStall+0x4c>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	78db      	ldrb	r3, [r3, #3]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d138      	bne.n	8008a00 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e027      	b.n	8008a00 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	78db      	ldrb	r3, [r3, #3]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d003      	beq.n	80089e0 <USB_EPClearStall+0x9e>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	78db      	ldrb	r3, [r3, #3]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d10f      	bne.n	8008a00 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a30:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a74:	f023 0303 	bic.w	r3, r3, #3
 8008a78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a88:	f023 0302 	bic.w	r3, r3, #2
 8008a8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aca:	f043 0302 	orr.w	r3, r3, #2
 8008ace:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4013      	ands	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4013      	ands	r3, r2
 8008b26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	0c1b      	lsrs	r3, r3, #16
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	b29b      	uxth	r3, r3
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	4013      	ands	r3, r2
 8008b98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	01db      	lsls	r3, r3, #7
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008be2:	78fb      	ldrb	r3, [r7, #3]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	f003 0301 	and.w	r3, r3, #1
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c3e:	f023 0307 	bic.w	r3, r3, #7
 8008c42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	460b      	mov	r3, r1
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	333c      	adds	r3, #60	; 0x3c
 8008c7e:	3304      	adds	r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	4a26      	ldr	r2, [pc, #152]	; (8008d20 <USB_EP0_OutStart+0xb8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d90a      	bls.n	8008ca2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c9c:	d101      	bne.n	8008ca2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e037      	b.n	8008d12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd0:	f043 0318 	orr.w	r3, r3, #24
 8008cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008ce8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10f      	bne.n	8008d10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008d0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	4f54300a 	.word	0x4f54300a

08008d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <USB_CoreReset+0x64>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d901      	bls.n	8008d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e01b      	b.n	8008d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	daf2      	bge.n	8008d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f043 0201 	orr.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <USB_CoreReset+0x64>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e006      	b.n	8008d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d0f0      	beq.n	8008d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	00030d40 	.word	0x00030d40

08008d8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d9c:	f002 f906 	bl	800afac <USBD_static_malloc>
 8008da0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008db0:	2302      	movs	r3, #2
 8008db2:	e066      	b.n	8008e82 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7c1b      	ldrb	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d119      	bne.n	8008df8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2181      	movs	r1, #129	; 0x81
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 ffca 	bl	800ad66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ddc:	2202      	movs	r2, #2
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 ffc0 	bl	800ad66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2210      	movs	r2, #16
 8008df2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008df6:	e016      	b.n	8008e26 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008df8:	2340      	movs	r3, #64	; 0x40
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	2181      	movs	r1, #129	; 0x81
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 ffb1 	bl	800ad66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e0a:	2340      	movs	r3, #64	; 0x40
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	2101      	movs	r1, #1
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 ffa8 	bl	800ad66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2210      	movs	r2, #16
 8008e22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e26:	2308      	movs	r3, #8
 8008e28:	2203      	movs	r2, #3
 8008e2a:	2182      	movs	r1, #130	; 0x82
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 ff9a 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7c1b      	ldrb	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f002 f86b 	bl	800af44 <USBD_LL_PrepareReceive>
 8008e6e:	e007      	b.n	8008e80 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2101      	movs	r1, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f002 f862 	bl	800af44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e96:	2181      	movs	r1, #129	; 0x81
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 ff8a 	bl	800adb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 ff83 	bl	800adb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008eb4:	2182      	movs	r1, #130	; 0x82
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 ff7b 	bl	800adb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00e      	beq.n	8008ef4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 f86e 	bl	800afc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e0af      	b.n	8009088 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03f      	beq.n	8008fb4 <USBD_CDC_Setup+0xb4>
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	f040 809f 	bne.w	8009078 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	88db      	ldrh	r3, [r3, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d02e      	beq.n	8008fa0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	da16      	bge.n	8008f7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008f58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	88d2      	ldrh	r2, [r2, #6]
 8008f5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b07      	cmp	r3, #7
 8008f66:	bf28      	it	cs
 8008f68:	2307      	movcs	r3, #7
 8008f6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	89fa      	ldrh	r2, [r7, #14]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fae9 	bl	800a54a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008f78:	e085      	b.n	8009086 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	785a      	ldrb	r2, [r3, #1]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f90:	6939      	ldr	r1, [r7, #16]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fb02 	bl	800a5a2 <USBD_CtlPrepareRx>
      break;
 8008f9e:	e072      	b.n	8009086 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	7850      	ldrb	r0, [r2, #1]
 8008fac:	2200      	movs	r2, #0
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	4798      	blx	r3
      break;
 8008fb2:	e068      	b.n	8009086 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b0b      	cmp	r3, #11
 8008fba:	d852      	bhi.n	8009062 <USBD_CDC_Setup+0x162>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_CDC_Setup+0xc4>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008ff5 	.word	0x08008ff5
 8008fc8:	08009071 	.word	0x08009071
 8008fcc:	08009063 	.word	0x08009063
 8008fd0:	08009063 	.word	0x08009063
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	08009063 	.word	0x08009063
 8008fdc:	08009063 	.word	0x08009063
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	08009063 	.word	0x08009063
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	0800901f 	.word	0x0800901f
 8008ff0:	08009049 	.word	0x08009049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d107      	bne.n	8009010 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009000:	f107 030a 	add.w	r3, r7, #10
 8009004:	2202      	movs	r2, #2
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fa9e 	bl	800a54a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800900e:	e032      	b.n	8009076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fa28 	bl	800a468 <USBD_CtlError>
            ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
          break;
 800901c:	e02b      	b.n	8009076 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d107      	bne.n	800903a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800902a:	f107 030d 	add.w	r3, r7, #13
 800902e:	2201      	movs	r2, #1
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fa89 	bl	800a54a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009038:	e01d      	b.n	8009076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fa13 	bl	800a468 <USBD_CtlError>
            ret = USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	75fb      	strb	r3, [r7, #23]
          break;
 8009046:	e016      	b.n	8009076 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b03      	cmp	r3, #3
 8009052:	d00f      	beq.n	8009074 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fa06 	bl	800a468 <USBD_CtlError>
            ret = USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009060:	e008      	b.n	8009074 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f9ff 	bl	800a468 <USBD_CtlError>
          ret = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	75fb      	strb	r3, [r7, #23]
          break;
 800906e:	e002      	b.n	8009076 <USBD_CDC_Setup+0x176>
          break;
 8009070:	bf00      	nop
 8009072:	e008      	b.n	8009086 <USBD_CDC_Setup+0x186>
          break;
 8009074:	bf00      	nop
      }
      break;
 8009076:	e006      	b.n	8009086 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 f9f4 	bl	800a468 <USBD_CtlError>
      ret = USBD_FAIL;
 8009080:	2303      	movs	r3, #3
 8009082:	75fb      	strb	r3, [r7, #23]
      break;
 8009084:	bf00      	nop
  }

  return (uint8_t)ret;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e04f      	b.n	8009152 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3318      	adds	r3, #24
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d029      	beq.n	8009124 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3318      	adds	r3, #24
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	78f9      	ldrb	r1, [r7, #3]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	460b      	mov	r3, r1
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	1a5b      	subs	r3, r3, r1
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4403      	add	r3, r0
 80090f0:	3344      	adds	r3, #68	; 0x44
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80090f8:	fb03 f301 	mul.w	r3, r3, r1
 80090fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d110      	bne.n	8009124 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	3318      	adds	r3, #24
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	2300      	movs	r3, #0
 800911a:	2200      	movs	r2, #0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fef0 	bl	800af02 <USBD_LL_Transmit>
 8009122:	e015      	b.n	8009150 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800916c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e015      	b.n	80091a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 ff00 	bl	800af86 <USBD_LL_GetRxDataSize>
 8009186:	4602      	mov	r2, r0
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091a2:	4611      	mov	r1, r2
 80091a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e01b      	b.n	8009202 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d015      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x50>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091da:	2bff      	cmp	r3, #255	; 0xff
 80091dc:	d010      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80091ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091f4:	b292      	uxth	r2, r2
 80091f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2243      	movs	r2, #67	; 0x43
 8009218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20000094 	.word	0x20000094

0800922c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2243      	movs	r2, #67	; 0x43
 8009238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800923a:	4b03      	ldr	r3, [pc, #12]	; (8009248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20000050 	.word	0x20000050

0800924c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2243      	movs	r2, #67	; 0x43
 8009258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800925a:	4b03      	ldr	r3, [pc, #12]	; (8009268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	200000d8 	.word	0x200000d8

0800926c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	220a      	movs	r2, #10
 8009278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	2000000c 	.word	0x2000000c

0800928c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e004      	b.n	80092aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e008      	b.n	80092e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009302:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	e004      	b.n	8009318 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800933e:	2303      	movs	r3, #3
 8009340:	e016      	b.n	8009370 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7c1b      	ldrb	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009354:	2101      	movs	r1, #1
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 fdf4 	bl	800af44 <USBD_LL_PrepareReceive>
 800935c:	e007      	b.n	800936e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009364:	2340      	movs	r3, #64	; 0x40
 8009366:	2101      	movs	r1, #1
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fdeb 	bl	800af44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	e01f      	b.n	80093d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	79fa      	ldrb	r2, [r7, #7]
 80093c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f001 fc67 	bl	800ac98 <USBD_LL_Init>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e016      	b.n	800941e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	f107 020e 	add.w	r2, r7, #14
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	4602      	mov	r2, r0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fc7e 	bl	800ad30 <USBD_LL_Start>
 8009434:	4603      	mov	r3, r0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	4611      	mov	r1, r2
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	78fa      	ldrb	r2, [r7, #3]
 80094ac:	4611      	mov	r1, r2
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
  }

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 ff90 	bl	800a3f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094e2:	461a      	mov	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d01a      	beq.n	800952e <USBD_LL_SetupStage+0x72>
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d822      	bhi.n	8009542 <USBD_LL_SetupStage+0x86>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <USBD_LL_SetupStage+0x4a>
 8009500:	2b01      	cmp	r3, #1
 8009502:	d00a      	beq.n	800951a <USBD_LL_SetupStage+0x5e>
 8009504:	e01d      	b.n	8009542 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa62 	bl	80099d8 <USBD_StdDevReq>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
      break;
 8009518:	e020      	b.n	800955c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fac6 	bl	8009ab4 <USBD_StdItfReq>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
      break;
 800952c:	e016      	b.n	800955c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fb05 	bl	8009b46 <USBD_StdEPReq>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
      break;
 8009540:	e00c      	b.n	800955c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800954c:	b2db      	uxtb	r3, r3
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 fc4d 	bl	800adf0 <USBD_LL_StallEP>
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]
      break;
 800955a:	bf00      	nop
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b086      	sub	sp, #24
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	460b      	mov	r3, r1
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d138      	bne.n	80095ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009588:	2b03      	cmp	r3, #3
 800958a:	d14a      	bne.n	8009622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	429a      	cmp	r2, r3
 8009596:	d913      	bls.n	80095c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	1ad2      	subs	r2, r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	4293      	cmp	r3, r2
 80095b0:	bf28      	it	cs
 80095b2:	4613      	movcs	r3, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f001 f80f 	bl	800a5dc <USBD_CtlContinueRx>
 80095be:	e030      	b.n	8009622 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d10b      	bne.n	80095e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f001 f80a 	bl	800a5fe <USBD_CtlSendStatus>
 80095ea:	e01a      	b.n	8009622 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d114      	bne.n	8009622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	7afa      	ldrb	r2, [r7, #11]
 800960e:	4611      	mov	r1, r2
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	4798      	blx	r3
 8009614:	4603      	mov	r3, r0
 8009616:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	e000      	b.n	8009624 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	460b      	mov	r3, r1
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800963a:	7afb      	ldrb	r3, [r7, #11]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d16b      	bne.n	8009718 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3314      	adds	r3, #20
 8009644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800964c:	2b02      	cmp	r3, #2
 800964e:	d156      	bne.n	80096fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	d914      	bls.n	8009686 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	461a      	mov	r2, r3
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 ff84 	bl	800a580 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009678:	2300      	movs	r3, #0
 800967a:	2200      	movs	r2, #0
 800967c:	2100      	movs	r1, #0
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f001 fc60 	bl	800af44 <USBD_LL_PrepareReceive>
 8009684:	e03b      	b.n	80096fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	d11c      	bne.n	80096cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800969a:	429a      	cmp	r2, r3
 800969c:	d316      	bcc.n	80096cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d20f      	bcs.n	80096cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096ac:	2200      	movs	r2, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 ff65 	bl	800a580 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096be:	2300      	movs	r3, #0
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f001 fc3d 	bl	800af44 <USBD_LL_PrepareReceive>
 80096ca:	e018      	b.n	80096fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d10b      	bne.n	80096f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096f0:	2180      	movs	r1, #128	; 0x80
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f001 fb7c 	bl	800adf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 ff93 	bl	800a624 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009704:	2b01      	cmp	r3, #1
 8009706:	d122      	bne.n	800974e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff fe98 	bl	800943e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009716:	e01a      	b.n	800974e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d114      	bne.n	800974e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00e      	beq.n	800974e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	4611      	mov	r1, r2
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	4798      	blx	r3
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	e000      	b.n	8009750 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	e02f      	b.n	80097ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6852      	ldr	r2, [r2, #4]
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	4611      	mov	r1, r2
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b6:	2340      	movs	r3, #64	; 0x40
 80097b8:	2200      	movs	r2, #0
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fad2 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2240      	movs	r2, #64	; 0x40
 80097ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d2:	2340      	movs	r3, #64	; 0x40
 80097d4:	2200      	movs	r2, #0
 80097d6:	2180      	movs	r1, #128	; 0x80
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fac4 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2240      	movs	r2, #64	; 0x40
 80097e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2204      	movs	r2, #4
 800982e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b04      	cmp	r3, #4
 8009852:	d106      	bne.n	8009862 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800985a:	b2da      	uxtb	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009882:	2303      	movs	r3, #3
 8009884:	e012      	b.n	80098ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b03      	cmp	r3, #3
 8009890:	d10b      	bne.n	80098aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e014      	b.n	80098f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d10d      	bne.n	80098f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009916:	2303      	movs	r3, #3
 8009918:	e014      	b.n	8009944 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d10d      	bne.n	8009942 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d007      	beq.n	8009942 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d009      	beq.n	8009990 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	6852      	ldr	r2, [r2, #4]
 8009988:	b2d2      	uxtb	r2, r2
 800998a:	4611      	mov	r1, r2
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
  }

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800999a:	b480      	push	{r7}
 800999c:	b087      	sub	sp, #28
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	3301      	adds	r3, #1
 80099b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099b8:	8a3b      	ldrh	r3, [r7, #16]
 80099ba:	021b      	lsls	r3, r3, #8
 80099bc:	b21a      	sxth	r2, r3
 80099be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	b21b      	sxth	r3, r3
 80099c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099c8:	89fb      	ldrh	r3, [r7, #14]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	371c      	adds	r7, #28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
	...

080099d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ee:	2b40      	cmp	r3, #64	; 0x40
 80099f0:	d005      	beq.n	80099fe <USBD_StdDevReq+0x26>
 80099f2:	2b40      	cmp	r3, #64	; 0x40
 80099f4:	d853      	bhi.n	8009a9e <USBD_StdDevReq+0xc6>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <USBD_StdDevReq+0x3a>
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	d14f      	bne.n	8009a9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a10:	e04a      	b.n	8009aa8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d83b      	bhi.n	8009a92 <USBD_StdDevReq+0xba>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <USBD_StdDevReq+0x48>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	08009a89 	.word	0x08009a89
 8009a28:	08009a93 	.word	0x08009a93
 8009a2c:	08009a7f 	.word	0x08009a7f
 8009a30:	08009a93 	.word	0x08009a93
 8009a34:	08009a53 	.word	0x08009a53
 8009a38:	08009a49 	.word	0x08009a49
 8009a3c:	08009a93 	.word	0x08009a93
 8009a40:	08009a6b 	.word	0x08009a6b
 8009a44:	08009a5d 	.word	0x08009a5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f9de 	bl	8009e0c <USBD_GetDescriptor>
          break;
 8009a50:	e024      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb43 	bl	800a0e0 <USBD_SetAddress>
          break;
 8009a5a:	e01f      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fb82 	bl	800a168 <USBD_SetConfig>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
          break;
 8009a68:	e018      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc21 	bl	800a2b4 <USBD_GetConfig>
          break;
 8009a72:	e013      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc52 	bl	800a320 <USBD_GetStatus>
          break;
 8009a7c:	e00e      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc81 	bl	800a388 <USBD_SetFeature>
          break;
 8009a86:	e009      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fc90 	bl	800a3b0 <USBD_ClrFeature>
          break;
 8009a90:	e004      	b.n	8009a9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fce7 	bl	800a468 <USBD_CtlError>
          break;
 8009a9a:	bf00      	nop
      }
      break;
 8009a9c:	e004      	b.n	8009aa8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fce1 	bl	800a468 <USBD_CtlError>
      break;
 8009aa6:	bf00      	nop
  }

  return ret;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop

08009ab4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	d005      	beq.n	8009ada <USBD_StdItfReq+0x26>
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d82f      	bhi.n	8009b32 <USBD_StdItfReq+0x7e>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <USBD_StdItfReq+0x26>
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d12b      	bne.n	8009b32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d81d      	bhi.n	8009b24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	889b      	ldrh	r3, [r3, #4]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d813      	bhi.n	8009b1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	88db      	ldrh	r3, [r3, #6]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d110      	bne.n	8009b2e <USBD_StdItfReq+0x7a>
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10d      	bne.n	8009b2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fd73 	bl	800a5fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b18:	e009      	b.n	8009b2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fca3 	bl	800a468 <USBD_CtlError>
          break;
 8009b22:	e004      	b.n	8009b2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fc9e 	bl	800a468 <USBD_CtlError>
          break;
 8009b2c:	e000      	b.n	8009b30 <USBD_StdItfReq+0x7c>
          break;
 8009b2e:	bf00      	nop
      }
      break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fc97 	bl	800a468 <USBD_CtlError>
      break;
 8009b3a:	bf00      	nop
  }

  return ret;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	889b      	ldrh	r3, [r3, #4]
 8009b58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b62:	2b40      	cmp	r3, #64	; 0x40
 8009b64:	d007      	beq.n	8009b76 <USBD_StdEPReq+0x30>
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	f200 8145 	bhi.w	8009df6 <USBD_StdEPReq+0x2b0>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <USBD_StdEPReq+0x44>
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	f040 8140 	bne.w	8009df6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	4798      	blx	r3
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
      break;
 8009b88:	e13a      	b.n	8009e00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d007      	beq.n	8009ba2 <USBD_StdEPReq+0x5c>
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	f300 8129 	bgt.w	8009dea <USBD_StdEPReq+0x2a4>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d07f      	beq.n	8009c9c <USBD_StdEPReq+0x156>
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d03c      	beq.n	8009c1a <USBD_StdEPReq+0xd4>
 8009ba0:	e123      	b.n	8009dea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d002      	beq.n	8009bb4 <USBD_StdEPReq+0x6e>
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d016      	beq.n	8009be0 <USBD_StdEPReq+0x9a>
 8009bb2:	e02c      	b.n	8009c0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <USBD_StdEPReq+0x90>
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b80      	cmp	r3, #128	; 0x80
 8009bbe:	d00a      	beq.n	8009bd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f913 	bl	800adf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 f90f 	bl	800adf0 <USBD_LL_StallEP>
 8009bd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd4:	e020      	b.n	8009c18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fc45 	bl	800a468 <USBD_CtlError>
              break;
 8009bde:	e01b      	b.n	8009c18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	885b      	ldrh	r3, [r3, #2]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10e      	bne.n	8009c06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <USBD_StdEPReq+0xc0>
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	2b80      	cmp	r3, #128	; 0x80
 8009bf2:	d008      	beq.n	8009c06 <USBD_StdEPReq+0xc0>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	88db      	ldrh	r3, [r3, #6]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f001 f8f5 	bl	800adf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fcf9 	bl	800a5fe <USBD_CtlSendStatus>

              break;
 8009c0c:	e004      	b.n	8009c18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fc29 	bl	800a468 <USBD_CtlError>
              break;
 8009c16:	bf00      	nop
          }
          break;
 8009c18:	e0ec      	b.n	8009df4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d002      	beq.n	8009c2c <USBD_StdEPReq+0xe6>
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d016      	beq.n	8009c58 <USBD_StdEPReq+0x112>
 8009c2a:	e030      	b.n	8009c8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00d      	beq.n	8009c4e <USBD_StdEPReq+0x108>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b80      	cmp	r3, #128	; 0x80
 8009c36:	d00a      	beq.n	8009c4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 f8d7 	bl	800adf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c42:	2180      	movs	r1, #128	; 0x80
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f8d3 	bl	800adf0 <USBD_LL_StallEP>
 8009c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c4c:	e025      	b.n	8009c9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc09 	bl	800a468 <USBD_CtlError>
              break;
 8009c56:	e020      	b.n	8009c9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	885b      	ldrh	r3, [r3, #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11b      	bne.n	8009c98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f8dd 	bl	800ae2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcc2 	bl	800a5fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	4798      	blx	r3
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fbe9 	bl	800a468 <USBD_CtlError>
              break;
 8009c96:	e000      	b.n	8009c9a <USBD_StdEPReq+0x154>
              break;
 8009c98:	bf00      	nop
          }
          break;
 8009c9a:	e0ab      	b.n	8009df4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d002      	beq.n	8009cae <USBD_StdEPReq+0x168>
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d032      	beq.n	8009d12 <USBD_StdEPReq+0x1cc>
 8009cac:	e097      	b.n	8009dde <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d007      	beq.n	8009cc4 <USBD_StdEPReq+0x17e>
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b80      	cmp	r3, #128	; 0x80
 8009cb8:	d004      	beq.n	8009cc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fbd3 	bl	800a468 <USBD_CtlError>
                break;
 8009cc2:	e091      	b.n	8009de8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da0b      	bge.n	8009ce4 <USBD_StdEPReq+0x19e>
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	3310      	adds	r3, #16
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	4413      	add	r3, r2
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	e00b      	b.n	8009cfc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2202      	movs	r2, #2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fc1d 	bl	800a54a <USBD_CtlSendData>
              break;
 8009d10:	e06a      	b.n	8009de8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da11      	bge.n	8009d3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	f003 020f 	and.w	r2, r3, #15
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3324      	adds	r3, #36	; 0x24
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d117      	bne.n	8009d64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fb96 	bl	800a468 <USBD_CtlError>
                  break;
 8009d3c:	e054      	b.n	8009de8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fb83 	bl	800a468 <USBD_CtlError>
                  break;
 8009d62:	e041      	b.n	8009de8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da0b      	bge.n	8009d84 <USBD_StdEPReq+0x23e>
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d72:	4613      	mov	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	3310      	adds	r3, #16
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4413      	add	r3, r2
 8009d80:	3304      	adds	r3, #4
 8009d82:	e00b      	b.n	8009d9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	4413      	add	r3, r2
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <USBD_StdEPReq+0x264>
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	2b80      	cmp	r3, #128	; 0x80
 8009da8:	d103      	bne.n	8009db2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	e00e      	b.n	8009dd0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 f858 	bl	800ae6c <USBD_LL_IsStallEP>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	e002      	b.n	8009dd0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fbb7 	bl	800a54a <USBD_CtlSendData>
              break;
 8009ddc:	e004      	b.n	8009de8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fb41 	bl	800a468 <USBD_CtlError>
              break;
 8009de6:	bf00      	nop
          }
          break;
 8009de8:	e004      	b.n	8009df4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fb3b 	bl	800a468 <USBD_CtlError>
          break;
 8009df2:	bf00      	nop
      }
      break;
 8009df4:	e004      	b.n	8009e00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fb35 	bl	800a468 <USBD_CtlError>
      break;
 8009dfe:	bf00      	nop
  }

  return ret;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b06      	cmp	r3, #6
 8009e2e:	f200 8128 	bhi.w	800a082 <USBD_GetDescriptor+0x276>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <USBD_GetDescriptor+0x2c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e55 	.word	0x08009e55
 8009e3c:	08009e6d 	.word	0x08009e6d
 8009e40:	08009ead 	.word	0x08009ead
 8009e44:	0800a083 	.word	0x0800a083
 8009e48:	0800a083 	.word	0x0800a083
 8009e4c:	0800a023 	.word	0x0800a023
 8009e50:	0800a04f 	.word	0x0800a04f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
      break;
 8009e6a:	e112      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7c1b      	ldrb	r3, [r3, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10d      	bne.n	8009e90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f107 0208 	add.w	r2, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e8e:	e100      	b.n	800a092 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	f107 0208 	add.w	r2, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	701a      	strb	r2, [r3, #0]
      break;
 8009eaa:	e0f2      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	885b      	ldrh	r3, [r3, #2]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	f200 80ac 	bhi.w	800a010 <USBD_GetDescriptor+0x204>
 8009eb8:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <USBD_GetDescriptor+0xb4>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009f0d 	.word	0x08009f0d
 8009ec8:	08009f41 	.word	0x08009f41
 8009ecc:	08009f75 	.word	0x08009f75
 8009ed0:	08009fa9 	.word	0x08009fa9
 8009ed4:	08009fdd 	.word	0x08009fdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00b      	beq.n	8009efc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	7c12      	ldrb	r2, [r2, #16]
 8009ef0:	f107 0108 	add.w	r1, r7, #8
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
 8009ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009efa:	e091      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fab2 	bl	800a468 <USBD_CtlError>
            err++;
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	3301      	adds	r3, #1
 8009f08:	72fb      	strb	r3, [r7, #11]
          break;
 8009f0a:	e089      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2e:	e077      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa98 	bl	800a468 <USBD_CtlError>
            err++;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3e:	e06f      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	7c12      	ldrb	r2, [r2, #16]
 8009f58:	f107 0108 	add.w	r1, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f62:	e05d      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa7e 	bl	800a468 <USBD_CtlError>
            err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
          break;
 8009f72:	e055      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f96:	e043      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa64 	bl	800a468 <USBD_CtlError>
            err++;
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa6:	e03b      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e029      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa4a 	bl	800a468 <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e021      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e00f      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa30 	bl	800a468 <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e007      	b.n	800a020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fa28 	bl	800a468 <USBD_CtlError>
          err++;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	3301      	adds	r3, #1
 800a01c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a01e:	bf00      	nop
      }
      break;
 800a020:	e037      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7c1b      	ldrb	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a032:	f107 0208 	add.w	r2, r7, #8
 800a036:	4610      	mov	r0, r2
 800a038:	4798      	blx	r3
 800a03a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a03c:	e029      	b.n	800a092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fa11 	bl	800a468 <USBD_CtlError>
        err++;
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	3301      	adds	r3, #1
 800a04a:	72fb      	strb	r3, [r7, #11]
      break;
 800a04c:	e021      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	7c1b      	ldrb	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10d      	bne.n	800a072 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	f107 0208 	add.w	r2, r7, #8
 800a062:	4610      	mov	r0, r2
 800a064:	4798      	blx	r3
 800a066:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	2207      	movs	r2, #7
 800a06e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a070:	e00f      	b.n	800a092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f9f7 	bl	800a468 <USBD_CtlError>
        err++;
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	3301      	adds	r3, #1
 800a07e:	72fb      	strb	r3, [r7, #11]
      break;
 800a080:	e007      	b.n	800a092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f9ef 	bl	800a468 <USBD_CtlError>
      err++;
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	3301      	adds	r3, #1
 800a08e:	72fb      	strb	r3, [r7, #11]
      break;
 800a090:	bf00      	nop
  }

  if (err != 0U)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d11e      	bne.n	800a0d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	88db      	ldrh	r3, [r3, #6]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d016      	beq.n	800a0ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0a0:	893b      	ldrh	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00e      	beq.n	800a0c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	88da      	ldrh	r2, [r3, #6]
 800a0aa:	893b      	ldrh	r3, [r7, #8]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	bf28      	it	cs
 800a0b0:	4613      	movcs	r3, r2
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0b6:	893b      	ldrh	r3, [r7, #8]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa44 	bl	800a54a <USBD_CtlSendData>
 800a0c2:	e009      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f9ce 	bl	800a468 <USBD_CtlError>
 800a0cc:	e004      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa95 	bl	800a5fe <USBD_CtlSendStatus>
 800a0d4:	e000      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    return;
 800a0d6:	bf00      	nop
  }
}
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop

0800a0e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d131      	bne.n	800a156 <USBD_SetAddress+0x76>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	88db      	ldrh	r3, [r3, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d12d      	bne.n	800a156 <USBD_SetAddress+0x76>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	2b7f      	cmp	r3, #127	; 0x7f
 800a100:	d829      	bhi.n	800a156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	885b      	ldrh	r3, [r3, #2]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b03      	cmp	r3, #3
 800a118:	d104      	bne.n	800a124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f9a3 	bl	800a468 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	e01d      	b.n	800a160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7bfa      	ldrb	r2, [r7, #15]
 800a128:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fec7 	bl	800aec4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa61 	bl	800a5fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14a:	e009      	b.n	800a160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a154:	e004      	b.n	800a160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f985 	bl	800a468 <USBD_CtlError>
  }
}
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	885b      	ldrh	r3, [r3, #2]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	4b4c      	ldr	r3, [pc, #304]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a180:	4b4b      	ldr	r3, [pc, #300]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d905      	bls.n	800a194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f96c 	bl	800a468 <USBD_CtlError>
    return USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e088      	b.n	800a2a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d002      	beq.n	800a1a6 <USBD_SetConfig+0x3e>
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d025      	beq.n	800a1f0 <USBD_SetConfig+0x88>
 800a1a4:	e071      	b.n	800a28a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1a6:	4b42      	ldr	r3, [pc, #264]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01c      	beq.n	800a1e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a1ae:	4b40      	ldr	r3, [pc, #256]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b8:	4b3d      	ldr	r3, [pc, #244]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff f948 	bl	8009454 <USBD_SetClassConfig>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f949 	bl	800a468 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1d6:	e065      	b.n	800a2a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa10 	bl	800a5fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1e6:	e05d      	b.n	800a2a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa08 	bl	800a5fe <USBD_CtlSendStatus>
      break;
 800a1ee:	e059      	b.n	800a2a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1f0:	4b2f      	ldr	r3, [pc, #188]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d112      	bne.n	800a21e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a200:	4b2b      	ldr	r3, [pc, #172]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a20a:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff f93b 	bl	800948c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9f1 	bl	800a5fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a21c:	e042      	b.n	800a2a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a21e:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d02a      	beq.n	800a282 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff f929 	bl	800948c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a244:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff f902 	bl	8009454 <USBD_SetClassConfig>
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00f      	beq.n	800a27a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f903 	bl	800a468 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff f90e 	bl	800948c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a278:	e014      	b.n	800a2a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9bf 	bl	800a5fe <USBD_CtlSendStatus>
      break;
 800a280:	e010      	b.n	800a2a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f9bb 	bl	800a5fe <USBD_CtlSendStatus>
      break;
 800a288:	e00c      	b.n	800a2a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f8eb 	bl	800a468 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <USBD_SetConfig+0x148>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff f8f7 	bl	800948c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a2:	bf00      	nop
  }

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	2000019c 	.word	0x2000019c

0800a2b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f8cd 	bl	800a468 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ce:	e023      	b.n	800a318 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	dc02      	bgt.n	800a2e2 <USBD_GetConfig+0x2e>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dc03      	bgt.n	800a2e8 <USBD_GetConfig+0x34>
 800a2e0:	e015      	b.n	800a30e <USBD_GetConfig+0x5a>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d00b      	beq.n	800a2fe <USBD_GetConfig+0x4a>
 800a2e6:	e012      	b.n	800a30e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f927 	bl	800a54a <USBD_CtlSendData>
        break;
 800a2fc:	e00c      	b.n	800a318 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3304      	adds	r3, #4
 800a302:	2201      	movs	r2, #1
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f91f 	bl	800a54a <USBD_CtlSendData>
        break;
 800a30c:	e004      	b.n	800a318 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f8a9 	bl	800a468 <USBD_CtlError>
        break;
 800a316:	bf00      	nop
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	b2db      	uxtb	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	2b02      	cmp	r3, #2
 800a336:	d81e      	bhi.n	800a376 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	88db      	ldrh	r3, [r3, #6]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d004      	beq.n	800a34a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f890 	bl	800a468 <USBD_CtlError>
        break;
 800a348:	e01a      	b.n	800a380 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f043 0202 	orr.w	r2, r3, #2
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	330c      	adds	r3, #12
 800a36a:	2202      	movs	r2, #2
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f8eb 	bl	800a54a <USBD_CtlSendData>
      break;
 800a374:	e004      	b.n	800a380 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f875 	bl	800a468 <USBD_CtlError>
      break;
 800a37e:	bf00      	nop
  }
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	885b      	ldrh	r3, [r3, #2]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d106      	bne.n	800a3a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f92b 	bl	800a5fe <USBD_CtlSendStatus>
  }
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d80b      	bhi.n	800a3e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	885b      	ldrh	r3, [r3, #2]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d10c      	bne.n	800a3ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f910 	bl	800a5fe <USBD_CtlSendStatus>
      }
      break;
 800a3de:	e004      	b.n	800a3ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f840 	bl	800a468 <USBD_CtlError>
      break;
 800a3e8:	e000      	b.n	800a3ec <USBD_ClrFeature+0x3c>
      break;
 800a3ea:	bf00      	nop
  }
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	781a      	ldrb	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781a      	ldrb	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7ff fabb 	bl	800999a <SWAPBYTE>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3301      	adds	r3, #1
 800a430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff faae 	bl	800999a <SWAPBYTE>
 800a43e:	4603      	mov	r3, r0
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff faa1 	bl	800999a <SWAPBYTE>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	80da      	strh	r2, [r3, #6]
}
 800a460:	bf00      	nop
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a472:	2180      	movs	r1, #128	; 0x80
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fcbb 	bl	800adf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a47a:	2100      	movs	r1, #0
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fcb7 	bl	800adf0 <USBD_LL_StallEP>
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b086      	sub	sp, #24
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d036      	beq.n	800a50e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4a4:	6938      	ldr	r0, [r7, #16]
 800a4a6:	f000 f836 	bl	800a516 <USBD_GetLen>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4da:	e013      	b.n	800a504 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	7812      	ldrb	r2, [r2, #0]
 800a4e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	613b      	str	r3, [r7, #16]
    idx++;
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	3301      	adds	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e7      	bne.n	800a4dc <USBD_GetString+0x52>
 800a50c:	e000      	b.n	800a510 <USBD_GetString+0x86>
    return;
 800a50e:	bf00      	nop
  }
}
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a526:	e005      	b.n	800a534 <USBD_GetLen+0x1e>
  {
    len++;
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	3301      	adds	r3, #1
 800a52c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	3301      	adds	r3, #1
 800a532:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f5      	bne.n	800a528 <USBD_GetLen+0x12>
  }

  return len;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2202      	movs	r2, #2
 800a55a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	2100      	movs	r1, #0
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 fcc6 	bl	800af02 <USBD_LL_Transmit>

  return USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	2100      	movs	r1, #0
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fcb5 	bl	800af02 <USBD_LL_Transmit>

  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2203      	movs	r2, #3
 800a5b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fcb9 	bl	800af44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fca8 	bl	800af44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2204      	movs	r2, #4
 800a60a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a60e:	2300      	movs	r3, #0
 800a610:	2200      	movs	r2, #0
 800a612:	2100      	movs	r1, #0
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fc74 	bl	800af02 <USBD_LL_Transmit>

  return USBD_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2205      	movs	r2, #5
 800a630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a634:	2300      	movs	r3, #0
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc82 	bl	800af44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a650:	2200      	movs	r2, #0
 800a652:	4912      	ldr	r1, [pc, #72]	; (800a69c <MX_USB_DEVICE_Init+0x50>)
 800a654:	4812      	ldr	r0, [pc, #72]	; (800a6a0 <MX_USB_DEVICE_Init+0x54>)
 800a656:	f7fe fe8f 	bl	8009378 <USBD_Init>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a660:	f7f6 fdf0 	bl	8001244 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a664:	490f      	ldr	r1, [pc, #60]	; (800a6a4 <MX_USB_DEVICE_Init+0x58>)
 800a666:	480e      	ldr	r0, [pc, #56]	; (800a6a0 <MX_USB_DEVICE_Init+0x54>)
 800a668:	f7fe feb6 	bl	80093d8 <USBD_RegisterClass>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a672:	f7f6 fde7 	bl	8001244 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a676:	490c      	ldr	r1, [pc, #48]	; (800a6a8 <MX_USB_DEVICE_Init+0x5c>)
 800a678:	4809      	ldr	r0, [pc, #36]	; (800a6a0 <MX_USB_DEVICE_Init+0x54>)
 800a67a:	f7fe fe07 	bl	800928c <USBD_CDC_RegisterInterface>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a684:	f7f6 fdde 	bl	8001244 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a688:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <MX_USB_DEVICE_Init+0x54>)
 800a68a:	f7fe fecc 	bl	8009426 <USBD_Start>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a694:	f7f6 fdd6 	bl	8001244 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a698:	bf00      	nop
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000130 	.word	0x20000130
 800a6a0:	200007c0 	.word	0x200007c0
 800a6a4:	20000018 	.word	0x20000018
 800a6a8:	2000011c 	.word	0x2000011c

0800a6ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4905      	ldr	r1, [pc, #20]	; (800a6c8 <CDC_Init_FS+0x1c>)
 800a6b4:	4805      	ldr	r0, [pc, #20]	; (800a6cc <CDC_Init_FS+0x20>)
 800a6b6:	f7fe fdfe 	bl	80092b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6ba:	4905      	ldr	r1, [pc, #20]	; (800a6d0 <CDC_Init_FS+0x24>)
 800a6bc:	4803      	ldr	r0, [pc, #12]	; (800a6cc <CDC_Init_FS+0x20>)
 800a6be:	f7fe fe18 	bl	80092f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20001290 	.word	0x20001290
 800a6cc:	200007c0 	.word	0x200007c0
 800a6d0:	20000a90 	.word	0x20000a90

0800a6d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	2b23      	cmp	r3, #35	; 0x23
 800a6f8:	d84a      	bhi.n	800a790 <CDC_Control_FS+0xac>
 800a6fa:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <CDC_Control_FS+0x1c>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a791 	.word	0x0800a791
 800a704:	0800a791 	.word	0x0800a791
 800a708:	0800a791 	.word	0x0800a791
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a791 	.word	0x0800a791
 800a714:	0800a791 	.word	0x0800a791
 800a718:	0800a791 	.word	0x0800a791
 800a71c:	0800a791 	.word	0x0800a791
 800a720:	0800a791 	.word	0x0800a791
 800a724:	0800a791 	.word	0x0800a791
 800a728:	0800a791 	.word	0x0800a791
 800a72c:	0800a791 	.word	0x0800a791
 800a730:	0800a791 	.word	0x0800a791
 800a734:	0800a791 	.word	0x0800a791
 800a738:	0800a791 	.word	0x0800a791
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a791 	.word	0x0800a791
 800a744:	0800a791 	.word	0x0800a791
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a791 	.word	0x0800a791
 800a754:	0800a791 	.word	0x0800a791
 800a758:	0800a791 	.word	0x0800a791
 800a75c:	0800a791 	.word	0x0800a791
 800a760:	0800a791 	.word	0x0800a791
 800a764:	0800a791 	.word	0x0800a791
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a791 	.word	0x0800a791
 800a774:	0800a791 	.word	0x0800a791
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a791 	.word	0x0800a791
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a791 	.word	0x0800a791
 800a788:	0800a791 	.word	0x0800a791
 800a78c:	0800a791 	.word	0x0800a791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a790:	bf00      	nop
  }

  return (USBD_OK);
 800a792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <CDC_Receive_FS+0x24>)
 800a7ae:	f7fe fda0 	bl	80092f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7b2:	4804      	ldr	r0, [pc, #16]	; (800a7c4 <CDC_Receive_FS+0x24>)
 800a7b4:	f7fe fdb6 	bl	8009324 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200007c0 	.word	0x200007c0

0800a7c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2212      	movs	r2, #18
 800a7fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7fe:	4b03      	ldr	r3, [pc, #12]	; (800a80c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	2000014c 	.word	0x2000014c

0800a810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2204      	movs	r2, #4
 800a820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a822:	4b03      	ldr	r3, [pc, #12]	; (800a830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20000160 	.word	0x20000160

0800a834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d105      	bne.n	800a852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4907      	ldr	r1, [pc, #28]	; (800a868 <USBD_FS_ProductStrDescriptor+0x34>)
 800a84a:	4808      	ldr	r0, [pc, #32]	; (800a86c <USBD_FS_ProductStrDescriptor+0x38>)
 800a84c:	f7ff fe1d 	bl	800a48a <USBD_GetString>
 800a850:	e004      	b.n	800a85c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4904      	ldr	r1, [pc, #16]	; (800a868 <USBD_FS_ProductStrDescriptor+0x34>)
 800a856:	4805      	ldr	r0, [pc, #20]	; (800a86c <USBD_FS_ProductStrDescriptor+0x38>)
 800a858:	f7ff fe17 	bl	800a48a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20001a90 	.word	0x20001a90
 800a86c:	0800b0a4 	.word	0x0800b0a4

0800a870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	4904      	ldr	r1, [pc, #16]	; (800a890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a880:	4804      	ldr	r0, [pc, #16]	; (800a894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a882:	f7ff fe02 	bl	800a48a <USBD_GetString>
  return USBD_StrDesc;
 800a886:	4b02      	ldr	r3, [pc, #8]	; (800a890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20001a90 	.word	0x20001a90
 800a894:	0800b0bc 	.word	0x0800b0bc

0800a898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	221a      	movs	r2, #26
 800a8a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8aa:	f000 f843 	bl	800a934 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8ae:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000164 	.word	0x20000164

0800a8bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4907      	ldr	r1, [pc, #28]	; (800a8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8d2:	4808      	ldr	r0, [pc, #32]	; (800a8f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8d4:	f7ff fdd9 	bl	800a48a <USBD_GetString>
 800a8d8:	e004      	b.n	800a8e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8de:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8e0:	f7ff fdd3 	bl	800a48a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e4:	4b02      	ldr	r3, [pc, #8]	; (800a8f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001a90 	.word	0x20001a90
 800a8f4:	0800b0d0 	.word	0x0800b0d0

0800a8f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a904:	79fb      	ldrb	r3, [r7, #7]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d105      	bne.n	800a916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	4907      	ldr	r1, [pc, #28]	; (800a92c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a90e:	4808      	ldr	r0, [pc, #32]	; (800a930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a910:	f7ff fdbb 	bl	800a48a <USBD_GetString>
 800a914:	e004      	b.n	800a920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4904      	ldr	r1, [pc, #16]	; (800a92c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a91a:	4805      	ldr	r0, [pc, #20]	; (800a930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a91c:	f7ff fdb5 	bl	800a48a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a920:	4b02      	ldr	r3, [pc, #8]	; (800a92c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20001a90 	.word	0x20001a90
 800a930:	0800b0dc 	.word	0x0800b0dc

0800a934 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a93a:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <Get_SerialNum+0x44>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a940:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <Get_SerialNum+0x48>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a946:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <Get_SerialNum+0x4c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d009      	beq.n	800a96e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a95a:	2208      	movs	r2, #8
 800a95c:	4909      	ldr	r1, [pc, #36]	; (800a984 <Get_SerialNum+0x50>)
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f814 	bl	800a98c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a964:	2204      	movs	r2, #4
 800a966:	4908      	ldr	r1, [pc, #32]	; (800a988 <Get_SerialNum+0x54>)
 800a968:	68b8      	ldr	r0, [r7, #8]
 800a96a:	f000 f80f 	bl	800a98c <IntToUnicode>
  }
}
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	1fff7a10 	.word	0x1fff7a10
 800a97c:	1fff7a14 	.word	0x1fff7a14
 800a980:	1fff7a18 	.word	0x1fff7a18
 800a984:	20000166 	.word	0x20000166
 800a988:	20000176 	.word	0x20000176

0800a98c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
 800a9a2:	e027      	b.n	800a9f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	0f1b      	lsrs	r3, r3, #28
 800a9a8:	2b09      	cmp	r3, #9
 800a9aa:	d80b      	bhi.n	800a9c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	0f1b      	lsrs	r3, r3, #28
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	440b      	add	r3, r1
 800a9bc:	3230      	adds	r2, #48	; 0x30
 800a9be:	b2d2      	uxtb	r2, r2
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	e00a      	b.n	800a9da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	0f1b      	lsrs	r3, r3, #28
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3237      	adds	r2, #55	; 0x37
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	75fb      	strb	r3, [r7, #23]
 800a9f4:	7dfa      	ldrb	r2, [r7, #23]
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d3d3      	bcc.n	800a9a4 <IntToUnicode+0x18>
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08a      	sub	sp, #40	; 0x28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa14:	f107 0314 	add.w	r3, r7, #20
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	605a      	str	r2, [r3, #4]
 800aa1e:	609a      	str	r2, [r3, #8]
 800aa20:	60da      	str	r2, [r3, #12]
 800aa22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa2c:	d13a      	bne.n	800aaa4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
 800aa32:	4b1e      	ldr	r3, [pc, #120]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa38:	f043 0301 	orr.w	r3, r3, #1
 800aa3c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa3e:	4b1b      	ldr	r3, [pc, #108]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa50:	2302      	movs	r3, #2
 800aa52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa5c:	230a      	movs	r3, #10
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa60:	f107 0314 	add.w	r3, r7, #20
 800aa64:	4619      	mov	r1, r3
 800aa66:	4812      	ldr	r0, [pc, #72]	; (800aab0 <HAL_PCD_MspInit+0xa4>)
 800aa68:	f7f7 fd8c 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa6c:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	4a0e      	ldr	r2, [pc, #56]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa76:	6353      	str	r3, [r2, #52]	; 0x34
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa80:	4a0a      	ldr	r2, [pc, #40]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa86:	6453      	str	r3, [r2, #68]	; 0x44
 800aa88:	4b08      	ldr	r3, [pc, #32]	; (800aaac <HAL_PCD_MspInit+0xa0>)
 800aa8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa94:	2200      	movs	r2, #0
 800aa96:	2100      	movs	r1, #0
 800aa98:	2043      	movs	r0, #67	; 0x43
 800aa9a:	f7f7 fd3c 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa9e:	2043      	movs	r0, #67	; 0x43
 800aaa0:	f7f7 fd55 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3728      	adds	r7, #40	; 0x28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40023800 	.word	0x40023800
 800aab0:	40020000 	.word	0x40020000

0800aab4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aac8:	4619      	mov	r1, r3
 800aaca:	4610      	mov	r0, r2
 800aacc:	f7fe fcf6 	bl	80094bc <USBD_LL_SetupStage>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	1a9b      	subs	r3, r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	440b      	add	r3, r1
 800aaf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	4619      	mov	r1, r3
 800ab02:	f7fe fd30 	bl	8009566 <USBD_LL_DataOutStage>
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	3348      	adds	r3, #72	; 0x48
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	4619      	mov	r1, r3
 800ab36:	f7fe fd79 	bl	800962c <USBD_LL_DataInStage>
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fe8d 	bl	8009870 <USBD_LL_SOF>
}
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab66:	2301      	movs	r3, #1
 800ab68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
 800ab76:	e008      	b.n	800ab8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d102      	bne.n	800ab86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ab80:	2301      	movs	r3, #1
 800ab82:	73fb      	strb	r3, [r7, #15]
 800ab84:	e001      	b.n	800ab8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab86:	f7f6 fb5d 	bl	8001244 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab90:	7bfa      	ldrb	r2, [r7, #15]
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe fe2d 	bl	80097f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe fdd9 	bl	8009758 <USBD_LL_Reset>
}
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fe28 	bl	8009814 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6812      	ldr	r2, [r2, #0]
 800abd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abd6:	f043 0301 	orr.w	r3, r3, #1
 800abda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d005      	beq.n	800abf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <HAL_PCD_SuspendCallback+0x48>)
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	4a03      	ldr	r2, [pc, #12]	; (800abf8 <HAL_PCD_SuspendCallback+0x48>)
 800abea:	f043 0306 	orr.w	r3, r3, #6
 800abee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	e000ed00 	.word	0xe000ed00

0800abfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fe18 	bl	8009840 <USBD_LL_Resume>
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac2a:	78fa      	ldrb	r2, [r7, #3]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fe66 	bl	8009900 <USBD_LL_IsoOUTIncomplete>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac4e:	78fa      	ldrb	r2, [r7, #3]
 800ac50:	4611      	mov	r1, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fe2e 	bl	80098b4 <USBD_LL_IsoINIncomplete>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fe6c 	bl	800994c <USBD_LL_DevConnected>
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fe69 	bl	8009962 <USBD_LL_DevDisconnected>
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d13c      	bne.n	800ad22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aca8:	4a20      	ldr	r2, [pc, #128]	; (800ad2c <USBD_LL_Init+0x94>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1e      	ldr	r2, [pc, #120]	; (800ad2c <USBD_LL_Init+0x94>)
 800acb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acb8:	4b1c      	ldr	r3, [pc, #112]	; (800ad2c <USBD_LL_Init+0x94>)
 800acba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800acbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800acc0:	4b1a      	ldr	r3, [pc, #104]	; (800ad2c <USBD_LL_Init+0x94>)
 800acc2:	2204      	movs	r2, #4
 800acc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800acc6:	4b19      	ldr	r3, [pc, #100]	; (800ad2c <USBD_LL_Init+0x94>)
 800acc8:	2202      	movs	r2, #2
 800acca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800accc:	4b17      	ldr	r3, [pc, #92]	; (800ad2c <USBD_LL_Init+0x94>)
 800acce:	2200      	movs	r2, #0
 800acd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acd2:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <USBD_LL_Init+0x94>)
 800acd4:	2202      	movs	r2, #2
 800acd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800acd8:	4b14      	ldr	r3, [pc, #80]	; (800ad2c <USBD_LL_Init+0x94>)
 800acda:	2200      	movs	r2, #0
 800acdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <USBD_LL_Init+0x94>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ace4:	4b11      	ldr	r3, [pc, #68]	; (800ad2c <USBD_LL_Init+0x94>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800acea:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <USBD_LL_Init+0x94>)
 800acec:	2200      	movs	r2, #0
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <USBD_LL_Init+0x94>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800acf6:	480d      	ldr	r0, [pc, #52]	; (800ad2c <USBD_LL_Init+0x94>)
 800acf8:	f7f7 ffc9 	bl	8002c8e <HAL_PCD_Init>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad02:	f7f6 fa9f 	bl	8001244 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad06:	2180      	movs	r1, #128	; 0x80
 800ad08:	4808      	ldr	r0, [pc, #32]	; (800ad2c <USBD_LL_Init+0x94>)
 800ad0a:	f7f9 f926 	bl	8003f5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad0e:	2240      	movs	r2, #64	; 0x40
 800ad10:	2100      	movs	r1, #0
 800ad12:	4806      	ldr	r0, [pc, #24]	; (800ad2c <USBD_LL_Init+0x94>)
 800ad14:	f7f9 f8da 	bl	8003ecc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad18:	2280      	movs	r2, #128	; 0x80
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4803      	ldr	r0, [pc, #12]	; (800ad2c <USBD_LL_Init+0x94>)
 800ad1e:	f7f9 f8d5 	bl	8003ecc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20001c90 	.word	0x20001c90

0800ad30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f8 f8be 	bl	8002ec8 <HAL_PCD_Start>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f942 	bl	800afdc <USBD_Get_USB_Status>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	4608      	mov	r0, r1
 800ad70:	4611      	mov	r1, r2
 800ad72:	461a      	mov	r2, r3
 800ad74:	4603      	mov	r3, r0
 800ad76:	70fb      	strb	r3, [r7, #3]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70bb      	strb	r3, [r7, #2]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad8e:	78bb      	ldrb	r3, [r7, #2]
 800ad90:	883a      	ldrh	r2, [r7, #0]
 800ad92:	78f9      	ldrb	r1, [r7, #3]
 800ad94:	f7f8 fca2 	bl	80036dc <HAL_PCD_EP_Open>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 f91c 	bl	800afdc <USBD_Get_USB_Status>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7f8 fceb 	bl	80037ac <HAL_PCD_EP_Close>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	4618      	mov	r0, r3
 800adde:	f000 f8fd 	bl	800afdc <USBD_Get_USB_Status>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f8 fdc3 	bl	800399a <HAL_PCD_EP_SetStall>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 f8de 	bl	800afdc <USBD_Get_USB_Status>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f8 fe08 	bl	8003a62 <HAL_PCD_EP_ClrStall>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f8bf 	bl	800afdc <USBD_Get_USB_Status>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da0b      	bge.n	800aea0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	4613      	mov	r3, r2
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	333e      	adds	r3, #62	; 0x3e
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	e00b      	b.n	800aeb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aeb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f8 fbd5 	bl	8003692 <HAL_PCD_SetAddress>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f874 	bl	800afdc <USBD_Get_USB_Status>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b086      	sub	sp, #24
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	603b      	str	r3, [r7, #0]
 800af0e:	460b      	mov	r3, r1
 800af10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af20:	7af9      	ldrb	r1, [r7, #11]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	f7f8 fcee 	bl	8003906 <HAL_PCD_EP_Transmit>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f853 	bl	800afdc <USBD_Get_USB_Status>
 800af36:	4603      	mov	r3, r0
 800af38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	607a      	str	r2, [r7, #4]
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	460b      	mov	r3, r1
 800af52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af62:	7af9      	ldrb	r1, [r7, #11]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	f7f8 fc6a 	bl	8003840 <HAL_PCD_EP_Receive>
 800af6c:	4603      	mov	r3, r0
 800af6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f832 	bl	800afdc <USBD_Get_USB_Status>
 800af78:	4603      	mov	r3, r0
 800af7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	460b      	mov	r3, r1
 800af90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af98:	78fa      	ldrb	r2, [r7, #3]
 800af9a:	4611      	mov	r1, r2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7f8 fc9a 	bl	80038d6 <HAL_PCD_EP_GetRxCount>
 800afa2:	4603      	mov	r3, r0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afb4:	4b03      	ldr	r3, [pc, #12]	; (800afc4 <USBD_static_malloc+0x18>)
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	200001a0 	.word	0x200001a0

0800afc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]

}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	2b03      	cmp	r3, #3
 800afee:	d817      	bhi.n	800b020 <USBD_Get_USB_Status+0x44>
 800aff0:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <USBD_Get_USB_Status+0x1c>)
 800aff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff6:	bf00      	nop
 800aff8:	0800b009 	.word	0x0800b009
 800affc:	0800b00f 	.word	0x0800b00f
 800b000:	0800b015 	.word	0x0800b015
 800b004:	0800b01b 	.word	0x0800b01b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	73fb      	strb	r3, [r7, #15]
    break;
 800b00c:	e00b      	b.n	800b026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b00e:	2303      	movs	r3, #3
 800b010:	73fb      	strb	r3, [r7, #15]
    break;
 800b012:	e008      	b.n	800b026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b014:	2301      	movs	r3, #1
 800b016:	73fb      	strb	r3, [r7, #15]
    break;
 800b018:	e005      	b.n	800b026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b01a:	2303      	movs	r3, #3
 800b01c:	73fb      	strb	r3, [r7, #15]
    break;
 800b01e:	e002      	b.n	800b026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b020:	2303      	movs	r3, #3
 800b022:	73fb      	strb	r3, [r7, #15]
    break;
 800b024:	bf00      	nop
  }
  return usb_status;
 800b026:	7bfb      	ldrb	r3, [r7, #15]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <__libc_init_array>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	4d0d      	ldr	r5, [pc, #52]	; (800b06c <__libc_init_array+0x38>)
 800b038:	4c0d      	ldr	r4, [pc, #52]	; (800b070 <__libc_init_array+0x3c>)
 800b03a:	1b64      	subs	r4, r4, r5
 800b03c:	10a4      	asrs	r4, r4, #2
 800b03e:	2600      	movs	r6, #0
 800b040:	42a6      	cmp	r6, r4
 800b042:	d109      	bne.n	800b058 <__libc_init_array+0x24>
 800b044:	4d0b      	ldr	r5, [pc, #44]	; (800b074 <__libc_init_array+0x40>)
 800b046:	4c0c      	ldr	r4, [pc, #48]	; (800b078 <__libc_init_array+0x44>)
 800b048:	f000 f820 	bl	800b08c <_init>
 800b04c:	1b64      	subs	r4, r4, r5
 800b04e:	10a4      	asrs	r4, r4, #2
 800b050:	2600      	movs	r6, #0
 800b052:	42a6      	cmp	r6, r4
 800b054:	d105      	bne.n	800b062 <__libc_init_array+0x2e>
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05c:	4798      	blx	r3
 800b05e:	3601      	adds	r6, #1
 800b060:	e7ee      	b.n	800b040 <__libc_init_array+0xc>
 800b062:	f855 3b04 	ldr.w	r3, [r5], #4
 800b066:	4798      	blx	r3
 800b068:	3601      	adds	r6, #1
 800b06a:	e7f2      	b.n	800b052 <__libc_init_array+0x1e>
 800b06c:	0800b10c 	.word	0x0800b10c
 800b070:	0800b10c 	.word	0x0800b10c
 800b074:	0800b10c 	.word	0x0800b10c
 800b078:	0800b110 	.word	0x0800b110

0800b07c <memset>:
 800b07c:	4402      	add	r2, r0
 800b07e:	4603      	mov	r3, r0
 800b080:	4293      	cmp	r3, r2
 800b082:	d100      	bne.n	800b086 <memset+0xa>
 800b084:	4770      	bx	lr
 800b086:	f803 1b01 	strb.w	r1, [r3], #1
 800b08a:	e7f9      	b.n	800b080 <memset+0x4>

0800b08c <_init>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	bf00      	nop
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr

0800b098 <_fini>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	bf00      	nop
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr
